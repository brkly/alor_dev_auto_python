# coding: utf-8

"""
    Alor OpenAPI V2

    <small>Swagger-документация для API v1 доступна по ссылке&#58; <a href=\"https://alor.dev/rawdocs/WarpOpenApi3.yml\">https://alor.dev/rawdocs/WarpOpenApi3.yml</a></small><br><br> API для работы с торговой системой АЛОР Брокер. Предоставляет интерфейсы для выставления заявок и получения биржевой информации.  Данные для неавторизованных запросов предоставляются с 15-минутной задержкой, для авторизованных - без задержек.   Публичная биржевая информация может быть получена через HTTP(S) API, а также доступна через однократно установленное WebSocket соединение. <br> **Внимание!** WebSocket соединения могут и будут разрываться *(например, если клиент не успевает обрабатывать сообщения и на стороне API в буфере накопится более 5000 событий)*. <br> Во внешнем ПО необходимо предусмотреть механизмы переподключения и переподписки (при необходимости)! <br> <br>  В OpenAPI V2 \"Санкт-Петербургская биржа\" (SPBX) еще находится в процессе разработки. Доступно получение рыночных данных *(marketdata, md)*. Заявки на SPBX в V2 пока недоступны. В V1 торговый функционал для SPBX доступен.  <h4> Доступные типы данных </h4>  * Все сделки  * Все заявки  * Информация по инструментам  * Котировки  * Биржевые стаканы  * Исторические данные  * Позиции  * Информация о клиенте  <h4>Поддерживаемые виды заявок</h4>  * рыночные  * лимитные  * стоп-лосс  * тейк-профит  * стоп-лосс лимит  * тейк-профит лимит  <h4>    Ограничения по частоте запросов     </h4> <p>На текущий момент ограничений по количеству запросов в минуту или WebSocket-подписок нет. <br/> Сервер может обрабатывать \"тяжелые\" запросы (пример - история за все время) и запросы без авторизации с меньшим приоритетом. <br/> АЛОР оставляет за собой право на ограничение частоты запросов, если это будет необходимо для стабильной работы системы. <br/> <br/></p>   <h2> Авторизация </h2>  <h4>OAuth</h4>  <b>Внимание!</b>   JWT и refresh token — равносильны логину и паролю. Их нужно скрывать от публичного доступа.  <h4>Для разработчиков сторонних приложений, в которых торговлю будут вести их пользователи.</h4>  Мы предоставляем сервис для авторизации сторониих приложений по стандарту OAuth 2.0. С примером приложения, использующего OAuth сервис для авторизации пользователей можно ознакомиться в разделе  <a href=\"/examples\">Примеры</a>.  Список разрешений (scopes), которые могут быть выданы приложению: <table>   <tr>     <td><b>OrdersRead</b></td>     <td>Чтение выставленных заявок</td>   </tr>   <tr>     <td><b>OrdersCreate</b></td>     <td>Выставление заявок</td>   </tr>   <tr>     <td><b>Trades</b></td>     <td>Чтение совершенных сделок</td>   </tr>   <tr>     <td><b>Personal</b></td>     <td>Персональная информация: ФИО, почта и т.п.</td>   </tr>   <tr>     <td><b>Stats</b></td>     <td>Статистика: прибыль, средние цены и т.п.</td>   </tr> </table>  <h4>Для ведения операций от своего имени</h4>  Выписать себе <b>refresh token</b> для ведения операций от своего имени [можно здесь](https://alor.dev/open-api-tokens).  <h2>Краткое описание работы с авторизацией</h2>  Чтобы выполнить авторизованный запрос, добавьте в запрос заголовок с именем \"Authorization\" и значением, состоящим из префикса `\"Bearer \"` и валидного JWT токена.  Срок жизни JWT короткий: это сделано для безопасности.  Для большинства вариантов использования API мы рекоммендуем использовать механизм  <b>refresh token</b> .  Механизм  <b>refresh token</b>  позволяет получать JWT с новым сроком жизни. Для этого отправьте POST запрос на адрес `https://oauthdev.alor.ru/refresh?token={refreshToken}` *(игровой контур)* или `https://oauth.alor.ru/refresh?token={refreshToken}` *(боевой контур)*. Если у  <b>refresh token</b>  не истек срок жизни и не он не был отозван, то в теле ответа в поле AccessToken вернётся свежий JWT токен.   Срок жизни  <b>refresh token</b>, получаемого обычным способом — 1 месяц.   Срок жизни  <b>refresh token</b>, получаемого самостоятельным выписыванием — год.  | |-  > Если мы для вас не завели портфели для ведения торговли в игровом контуре, оставьте заявку на <a href=\"mailto:openapi@alor.ru\">openapi@alor.ru</a> или свяжитесь с нами в [телеграме](https://tgmssg.ru/AlorOpenAPI).  </br></br> Игровой контур: `https://apidev.alor.ru`  Боевой контур: `https://api.alor.ru`   # noqa: E501

    OpenAPI spec version: 1.0
    Contact: openapi@alor.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Risk(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'portfolio': 'str',
        'exchange': 'str',
        'portfolio_evaluation': 'float',
        'portfolio_liquidation_value': 'float',
        'initial_margin': 'float',
        'minimal_margin': 'float',
        'corrected_margin': 'float',
        'risk_coverage_ratio_one': 'float',
        'risk_coverage_ratio_two': 'float',
        'risk_category_id': 'int',
        'client_type': 'str',
        'has_forbidden_positions': 'bool',
        'has_negative_quantity': 'bool'
    }

    attribute_map = {
        'portfolio': 'portfolio',
        'exchange': 'exchange',
        'portfolio_evaluation': 'portfolioEvaluation',
        'portfolio_liquidation_value': 'portfolioLiquidationValue',
        'initial_margin': 'initialMargin',
        'minimal_margin': 'minimalMargin',
        'corrected_margin': 'correctedMargin',
        'risk_coverage_ratio_one': 'riskCoverageRatioOne',
        'risk_coverage_ratio_two': 'riskCoverageRatioTwo',
        'risk_category_id': 'riskCategoryId',
        'client_type': 'clientType',
        'has_forbidden_positions': 'hasForbiddenPositions',
        'has_negative_quantity': 'hasNegativeQuantity'
    }

    def __init__(self, portfolio=None, exchange=None, portfolio_evaluation=None, portfolio_liquidation_value=None, initial_margin=None, minimal_margin=None, corrected_margin=None, risk_coverage_ratio_one=None, risk_coverage_ratio_two=None, risk_category_id=None, client_type=None, has_forbidden_positions=None, has_negative_quantity=None):  # noqa: E501
        """Risk - a model defined in Swagger"""  # noqa: E501
        self._portfolio = None
        self._exchange = None
        self._portfolio_evaluation = None
        self._portfolio_liquidation_value = None
        self._initial_margin = None
        self._minimal_margin = None
        self._corrected_margin = None
        self._risk_coverage_ratio_one = None
        self._risk_coverage_ratio_two = None
        self._risk_category_id = None
        self._client_type = None
        self._has_forbidden_positions = None
        self._has_negative_quantity = None
        self.discriminator = None
        if portfolio is not None:
            self.portfolio = portfolio
        if exchange is not None:
            self.exchange = exchange
        if portfolio_evaluation is not None:
            self.portfolio_evaluation = portfolio_evaluation
        if portfolio_liquidation_value is not None:
            self.portfolio_liquidation_value = portfolio_liquidation_value
        if initial_margin is not None:
            self.initial_margin = initial_margin
        if minimal_margin is not None:
            self.minimal_margin = minimal_margin
        if corrected_margin is not None:
            self.corrected_margin = corrected_margin
        if risk_coverage_ratio_one is not None:
            self.risk_coverage_ratio_one = risk_coverage_ratio_one
        if risk_coverage_ratio_two is not None:
            self.risk_coverage_ratio_two = risk_coverage_ratio_two
        if risk_category_id is not None:
            self.risk_category_id = risk_category_id
        if client_type is not None:
            self.client_type = client_type
        if has_forbidden_positions is not None:
            self.has_forbidden_positions = has_forbidden_positions
        if has_negative_quantity is not None:
            self.has_negative_quantity = has_negative_quantity

    @property
    def portfolio(self):
        """Gets the portfolio of this Risk.  # noqa: E501

        Идентификатор клиентского портфеля  # noqa: E501

        :return: The portfolio of this Risk.  # noqa: E501
        :rtype: str
        """
        return self._portfolio

    @portfolio.setter
    def portfolio(self, portfolio):
        """Sets the portfolio of this Risk.

        Идентификатор клиентского портфеля  # noqa: E501

        :param portfolio: The portfolio of this Risk.  # noqa: E501
        :type: str
        """

        self._portfolio = portfolio

    @property
    def exchange(self):
        """Gets the exchange of this Risk.  # noqa: E501

        Биржа  # noqa: E501

        :return: The exchange of this Risk.  # noqa: E501
        :rtype: str
        """
        return self._exchange

    @exchange.setter
    def exchange(self, exchange):
        """Sets the exchange of this Risk.

        Биржа  # noqa: E501

        :param exchange: The exchange of this Risk.  # noqa: E501
        :type: str
        """

        self._exchange = exchange

    @property
    def portfolio_evaluation(self):
        """Gets the portfolio_evaluation of this Risk.  # noqa: E501

        Общая стоимость портфеля  # noqa: E501

        :return: The portfolio_evaluation of this Risk.  # noqa: E501
        :rtype: float
        """
        return self._portfolio_evaluation

    @portfolio_evaluation.setter
    def portfolio_evaluation(self, portfolio_evaluation):
        """Sets the portfolio_evaluation of this Risk.

        Общая стоимость портфеля  # noqa: E501

        :param portfolio_evaluation: The portfolio_evaluation of this Risk.  # noqa: E501
        :type: float
        """

        self._portfolio_evaluation = portfolio_evaluation

    @property
    def portfolio_liquidation_value(self):
        """Gets the portfolio_liquidation_value of this Risk.  # noqa: E501

        Стоимость ликвидного портфеля  # noqa: E501

        :return: The portfolio_liquidation_value of this Risk.  # noqa: E501
        :rtype: float
        """
        return self._portfolio_liquidation_value

    @portfolio_liquidation_value.setter
    def portfolio_liquidation_value(self, portfolio_liquidation_value):
        """Sets the portfolio_liquidation_value of this Risk.

        Стоимость ликвидного портфеля  # noqa: E501

        :param portfolio_liquidation_value: The portfolio_liquidation_value of this Risk.  # noqa: E501
        :type: float
        """

        self._portfolio_liquidation_value = portfolio_liquidation_value

    @property
    def initial_margin(self):
        """Gets the initial_margin of this Risk.  # noqa: E501

        Начальная маржа  # noqa: E501

        :return: The initial_margin of this Risk.  # noqa: E501
        :rtype: float
        """
        return self._initial_margin

    @initial_margin.setter
    def initial_margin(self, initial_margin):
        """Sets the initial_margin of this Risk.

        Начальная маржа  # noqa: E501

        :param initial_margin: The initial_margin of this Risk.  # noqa: E501
        :type: float
        """

        self._initial_margin = initial_margin

    @property
    def minimal_margin(self):
        """Gets the minimal_margin of this Risk.  # noqa: E501

        Минимальная маржа  # noqa: E501

        :return: The minimal_margin of this Risk.  # noqa: E501
        :rtype: float
        """
        return self._minimal_margin

    @minimal_margin.setter
    def minimal_margin(self, minimal_margin):
        """Sets the minimal_margin of this Risk.

        Минимальная маржа  # noqa: E501

        :param minimal_margin: The minimal_margin of this Risk.  # noqa: E501
        :type: float
        """

        self._minimal_margin = minimal_margin

    @property
    def corrected_margin(self):
        """Gets the corrected_margin of this Risk.  # noqa: E501

        Скорректированная маржа  # noqa: E501

        :return: The corrected_margin of this Risk.  # noqa: E501
        :rtype: float
        """
        return self._corrected_margin

    @corrected_margin.setter
    def corrected_margin(self, corrected_margin):
        """Sets the corrected_margin of this Risk.

        Скорректированная маржа  # noqa: E501

        :param corrected_margin: The corrected_margin of this Risk.  # noqa: E501
        :type: float
        """

        self._corrected_margin = corrected_margin

    @property
    def risk_coverage_ratio_one(self):
        """Gets the risk_coverage_ratio_one of this Risk.  # noqa: E501

        НПР1  # noqa: E501

        :return: The risk_coverage_ratio_one of this Risk.  # noqa: E501
        :rtype: float
        """
        return self._risk_coverage_ratio_one

    @risk_coverage_ratio_one.setter
    def risk_coverage_ratio_one(self, risk_coverage_ratio_one):
        """Sets the risk_coverage_ratio_one of this Risk.

        НПР1  # noqa: E501

        :param risk_coverage_ratio_one: The risk_coverage_ratio_one of this Risk.  # noqa: E501
        :type: float
        """

        self._risk_coverage_ratio_one = risk_coverage_ratio_one

    @property
    def risk_coverage_ratio_two(self):
        """Gets the risk_coverage_ratio_two of this Risk.  # noqa: E501

        НПР2  # noqa: E501

        :return: The risk_coverage_ratio_two of this Risk.  # noqa: E501
        :rtype: float
        """
        return self._risk_coverage_ratio_two

    @risk_coverage_ratio_two.setter
    def risk_coverage_ratio_two(self, risk_coverage_ratio_two):
        """Sets the risk_coverage_ratio_two of this Risk.

        НПР2  # noqa: E501

        :param risk_coverage_ratio_two: The risk_coverage_ratio_two of this Risk.  # noqa: E501
        :type: float
        """

        self._risk_coverage_ratio_two = risk_coverage_ratio_two

    @property
    def risk_category_id(self):
        """Gets the risk_category_id of this Risk.  # noqa: E501

        Категория риска  # noqa: E501

        :return: The risk_category_id of this Risk.  # noqa: E501
        :rtype: int
        """
        return self._risk_category_id

    @risk_category_id.setter
    def risk_category_id(self, risk_category_id):
        """Sets the risk_category_id of this Risk.

        Категория риска  # noqa: E501

        :param risk_category_id: The risk_category_id of this Risk.  # noqa: E501
        :type: int
        """

        self._risk_category_id = risk_category_id

    @property
    def client_type(self):
        """Gets the client_type of this Risk.  # noqa: E501

        Тип клиента  # noqa: E501

        :return: The client_type of this Risk.  # noqa: E501
        :rtype: str
        """
        return self._client_type

    @client_type.setter
    def client_type(self, client_type):
        """Sets the client_type of this Risk.

        Тип клиента  # noqa: E501

        :param client_type: The client_type of this Risk.  # noqa: E501
        :type: str
        """

        self._client_type = client_type

    @property
    def has_forbidden_positions(self):
        """Gets the has_forbidden_positions of this Risk.  # noqa: E501

        Имеются ли запретные позиции  # noqa: E501

        :return: The has_forbidden_positions of this Risk.  # noqa: E501
        :rtype: bool
        """
        return self._has_forbidden_positions

    @has_forbidden_positions.setter
    def has_forbidden_positions(self, has_forbidden_positions):
        """Sets the has_forbidden_positions of this Risk.

        Имеются ли запретные позиции  # noqa: E501

        :param has_forbidden_positions: The has_forbidden_positions of this Risk.  # noqa: E501
        :type: bool
        """

        self._has_forbidden_positions = has_forbidden_positions

    @property
    def has_negative_quantity(self):
        """Gets the has_negative_quantity of this Risk.  # noqa: E501

        Имеются ли отрицательные количества  # noqa: E501

        :return: The has_negative_quantity of this Risk.  # noqa: E501
        :rtype: bool
        """
        return self._has_negative_quantity

    @has_negative_quantity.setter
    def has_negative_quantity(self, has_negative_quantity):
        """Sets the has_negative_quantity of this Risk.

        Имеются ли отрицательные количества  # noqa: E501

        :param has_negative_quantity: The has_negative_quantity of this Risk.  # noqa: E501
        :type: bool
        """

        self._has_negative_quantity = has_negative_quantity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Risk, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Risk):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
