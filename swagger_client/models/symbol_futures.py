# coding: utf-8

"""
    Alor OpenAPI V2

    <small>Swagger-документация для API v1 доступна по ссылке&#58; <a href=\"https://alor.dev/rawdocs/WarpOpenApi3.yml\">https://alor.dev/rawdocs/WarpOpenApi3.yml</a></small><br><br> API для работы с торговой системой АЛОР Брокер. Предоставляет интерфейсы для выставления заявок и получения биржевой информации.  Данные для неавторизованных запросов предоставляются с 15-минутной задержкой, для авторизованных - без задержек.   Публичная биржевая информация может быть получена через HTTP(S) API, а также доступна через однократно установленное WebSocket соединение. <br> **Внимание!** WebSocket соединения могут и будут разрываться *(например, если клиент не успевает обрабатывать сообщения и на стороне API в буфере накопится более 5000 событий)*. <br> Во внешнем ПО необходимо предусмотреть механизмы переподключения и переподписки (при необходимости)! <br> <br>  В OpenAPI V2 \"Санкт-Петербургская биржа\" (SPBX) еще находится в процессе разработки. Доступно получение рыночных данных *(marketdata, md)*. Заявки на SPBX в V2 пока недоступны. В V1 торговый функционал для SPBX доступен.  <h4> Доступные типы данных </h4>  * Все сделки  * Все заявки  * Информация по инструментам  * Котировки  * Биржевые стаканы  * Исторические данные  * Позиции  * Информация о клиенте  <h4>Поддерживаемые виды заявок</h4>  * рыночные  * лимитные  * стоп-лосс  * тейк-профит  * стоп-лосс лимит  * тейк-профит лимит  <h4>    Ограничения по частоте запросов     </h4> <p>На текущий момент ограничений по количеству запросов в минуту или WebSocket-подписок нет. <br/> Сервер может обрабатывать \"тяжелые\" запросы (пример - история за все время) и запросы без авторизации с меньшим приоритетом. <br/> АЛОР оставляет за собой право на ограничение частоты запросов, если это будет необходимо для стабильной работы системы. <br/> <br/></p>   <h2> Авторизация </h2>  <h4>OAuth</h4>  <b>Внимание!</b>   JWT и refresh token — равносильны логину и паролю. Их нужно скрывать от публичного доступа.  <h4>Для разработчиков сторонних приложений, в которых торговлю будут вести их пользователи.</h4>  Мы предоставляем сервис для авторизации сторониих приложений по стандарту OAuth 2.0. С примером приложения, использующего OAuth сервис для авторизации пользователей можно ознакомиться в разделе  <a href=\"/examples\">Примеры</a>.  Список разрешений (scopes), которые могут быть выданы приложению: <table>   <tr>     <td><b>OrdersRead</b></td>     <td>Чтение выставленных заявок</td>   </tr>   <tr>     <td><b>OrdersCreate</b></td>     <td>Выставление заявок</td>   </tr>   <tr>     <td><b>Trades</b></td>     <td>Чтение совершенных сделок</td>   </tr>   <tr>     <td><b>Personal</b></td>     <td>Персональная информация: ФИО, почта и т.п.</td>   </tr>   <tr>     <td><b>Stats</b></td>     <td>Статистика: прибыль, средние цены и т.п.</td>   </tr> </table>  <h4>Для ведения операций от своего имени</h4>  Выписать себе <b>refresh token</b> для ведения операций от своего имени [можно здесь](https://alor.dev/open-api-tokens).  <h2>Краткое описание работы с авторизацией</h2>  Чтобы выполнить авторизованный запрос, добавьте в запрос заголовок с именем \"Authorization\" и значением, состоящим из префикса `\"Bearer \"` и валидного JWT токена.  Срок жизни JWT короткий: это сделано для безопасности.  Для большинства вариантов использования API мы рекоммендуем использовать механизм  <b>refresh token</b> .  Механизм  <b>refresh token</b>  позволяет получать JWT с новым сроком жизни. Для этого отправьте POST запрос на адрес `https://oauthdev.alor.ru/refresh?token={refreshToken}` *(игровой контур)* или `https://oauth.alor.ru/refresh?token={refreshToken}` *(боевой контур)*. Если у  <b>refresh token</b>  не истек срок жизни и не он не был отозван, то в теле ответа в поле AccessToken вернётся свежий JWT токен.   Срок жизни  <b>refresh token</b>, получаемого обычным способом — 1 месяц.   Срок жизни  <b>refresh token</b>, получаемого самостоятельным выписыванием — год.  | |-  > Если мы для вас не завели портфели для ведения торговли в игровом контуре, оставьте заявку на <a href=\"mailto:openapi@alor.ru\">openapi@alor.ru</a> или свяжитесь с нами в [телеграме](https://tgmssg.ru/AlorOpenAPI).  </br></br> Игровой контур: `https://apidev.alor.ru`  Боевой контур: `https://api.alor.ru`   # noqa: E501

    OpenAPI spec version: 1.0
    Contact: openapi@alor.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SymbolFutures(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'symbol': 'str',
        'exchange': 'str',
        'description': 'str',
        'ask': 'float',
        'bid': 'float',
        'prev_close_price': 'float',
        'last_price': 'float',
        'last_price_timestamp': 'int',
        'change': 'float',
        'change_percent': 'float',
        'high_price': 'float',
        'low_price': 'float',
        'accrued_int': 'int',
        'accrued_interest': 'int',
        'volume': 'float',
        'open_price': 'float',
        '_yield': 'int',
        'lotsize': 'float',
        'lotvalue': 'float',
        'facevalue': 'float',
        'type': 'str'
    }

    attribute_map = {
        'symbol': 'symbol',
        'exchange': 'exchange',
        'description': 'description',
        'ask': 'ask',
        'bid': 'bid',
        'prev_close_price': 'prev_close_price',
        'last_price': 'last_price',
        'last_price_timestamp': 'last_price_timestamp',
        'change': 'change',
        'change_percent': 'change_percent',
        'high_price': 'high_price',
        'low_price': 'low_price',
        'accrued_int': 'accruedInt',
        'accrued_interest': 'accrued_interest',
        'volume': 'volume',
        'open_price': 'open_price',
        '_yield': 'yield',
        'lotsize': 'lotsize',
        'lotvalue': 'lotvalue',
        'facevalue': 'facevalue',
        'type': 'type'
    }

    def __init__(self, symbol=None, exchange=None, description=None, ask=None, bid=None, prev_close_price=None, last_price=None, last_price_timestamp=None, change=None, change_percent=None, high_price=None, low_price=None, accrued_int=None, accrued_interest=None, volume=None, open_price=None, _yield=None, lotsize=None, lotvalue=None, facevalue=None, type=None):  # noqa: E501
        """SymbolFutures - a model defined in Swagger"""  # noqa: E501
        self._symbol = None
        self._exchange = None
        self._description = None
        self._ask = None
        self._bid = None
        self._prev_close_price = None
        self._last_price = None
        self._last_price_timestamp = None
        self._change = None
        self._change_percent = None
        self._high_price = None
        self._low_price = None
        self._accrued_int = None
        self._accrued_interest = None
        self._volume = None
        self._open_price = None
        self.__yield = None
        self._lotsize = None
        self._lotvalue = None
        self._facevalue = None
        self._type = None
        self.discriminator = None
        if symbol is not None:
            self.symbol = symbol
        if exchange is not None:
            self.exchange = exchange
        if description is not None:
            self.description = description
        if ask is not None:
            self.ask = ask
        if bid is not None:
            self.bid = bid
        if prev_close_price is not None:
            self.prev_close_price = prev_close_price
        if last_price is not None:
            self.last_price = last_price
        if last_price_timestamp is not None:
            self.last_price_timestamp = last_price_timestamp
        if change is not None:
            self.change = change
        if change_percent is not None:
            self.change_percent = change_percent
        if high_price is not None:
            self.high_price = high_price
        if low_price is not None:
            self.low_price = low_price
        if accrued_int is not None:
            self.accrued_int = accrued_int
        if accrued_interest is not None:
            self.accrued_interest = accrued_interest
        if volume is not None:
            self.volume = volume
        if open_price is not None:
            self.open_price = open_price
        if _yield is not None:
            self._yield = _yield
        if lotsize is not None:
            self.lotsize = lotsize
        if lotvalue is not None:
            self.lotvalue = lotvalue
        if facevalue is not None:
            self.facevalue = facevalue
        if type is not None:
            self.type = type

    @property
    def symbol(self):
        """Gets the symbol of this SymbolFutures.  # noqa: E501

        Тикер (Код финансового инструмента)  # noqa: E501

        :return: The symbol of this SymbolFutures.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this SymbolFutures.

        Тикер (Код финансового инструмента)  # noqa: E501

        :param symbol: The symbol of this SymbolFutures.  # noqa: E501
        :type: str
        """

        self._symbol = symbol

    @property
    def exchange(self):
        """Gets the exchange of this SymbolFutures.  # noqa: E501

        Биржа  # noqa: E501

        :return: The exchange of this SymbolFutures.  # noqa: E501
        :rtype: str
        """
        return self._exchange

    @exchange.setter
    def exchange(self, exchange):
        """Sets the exchange of this SymbolFutures.

        Биржа  # noqa: E501

        :param exchange: The exchange of this SymbolFutures.  # noqa: E501
        :type: str
        """

        self._exchange = exchange

    @property
    def description(self):
        """Gets the description of this SymbolFutures.  # noqa: E501

        Короткое описание на русском языке  # noqa: E501

        :return: The description of this SymbolFutures.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SymbolFutures.

        Короткое описание на русском языке  # noqa: E501

        :param description: The description of this SymbolFutures.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def ask(self):
        """Gets the ask of this SymbolFutures.  # noqa: E501

        Аск  # noqa: E501

        :return: The ask of this SymbolFutures.  # noqa: E501
        :rtype: float
        """
        return self._ask

    @ask.setter
    def ask(self, ask):
        """Sets the ask of this SymbolFutures.

        Аск  # noqa: E501

        :param ask: The ask of this SymbolFutures.  # noqa: E501
        :type: float
        """

        self._ask = ask

    @property
    def bid(self):
        """Gets the bid of this SymbolFutures.  # noqa: E501

        Бид  # noqa: E501

        :return: The bid of this SymbolFutures.  # noqa: E501
        :rtype: float
        """
        return self._bid

    @bid.setter
    def bid(self, bid):
        """Sets the bid of this SymbolFutures.

        Бид  # noqa: E501

        :param bid: The bid of this SymbolFutures.  # noqa: E501
        :type: float
        """

        self._bid = bid

    @property
    def prev_close_price(self):
        """Gets the prev_close_price of this SymbolFutures.  # noqa: E501

        Цена предыдущего закрытия  # noqa: E501

        :return: The prev_close_price of this SymbolFutures.  # noqa: E501
        :rtype: float
        """
        return self._prev_close_price

    @prev_close_price.setter
    def prev_close_price(self, prev_close_price):
        """Sets the prev_close_price of this SymbolFutures.

        Цена предыдущего закрытия  # noqa: E501

        :param prev_close_price: The prev_close_price of this SymbolFutures.  # noqa: E501
        :type: float
        """

        self._prev_close_price = prev_close_price

    @property
    def last_price(self):
        """Gets the last_price of this SymbolFutures.  # noqa: E501

        Последняя цена  # noqa: E501

        :return: The last_price of this SymbolFutures.  # noqa: E501
        :rtype: float
        """
        return self._last_price

    @last_price.setter
    def last_price(self, last_price):
        """Sets the last_price of this SymbolFutures.

        Последняя цена  # noqa: E501

        :param last_price: The last_price of this SymbolFutures.  # noqa: E501
        :type: float
        """

        self._last_price = last_price

    @property
    def last_price_timestamp(self):
        """Gets the last_price_timestamp of this SymbolFutures.  # noqa: E501

        Время последней цены (UTC)  # noqa: E501

        :return: The last_price_timestamp of this SymbolFutures.  # noqa: E501
        :rtype: int
        """
        return self._last_price_timestamp

    @last_price_timestamp.setter
    def last_price_timestamp(self, last_price_timestamp):
        """Sets the last_price_timestamp of this SymbolFutures.

        Время последней цены (UTC)  # noqa: E501

        :param last_price_timestamp: The last_price_timestamp of this SymbolFutures.  # noqa: E501
        :type: int
        """

        self._last_price_timestamp = last_price_timestamp

    @property
    def change(self):
        """Gets the change of this SymbolFutures.  # noqa: E501

        Разность цены и цены предыдущего закрытия  # noqa: E501

        :return: The change of this SymbolFutures.  # noqa: E501
        :rtype: float
        """
        return self._change

    @change.setter
    def change(self, change):
        """Sets the change of this SymbolFutures.

        Разность цены и цены предыдущего закрытия  # noqa: E501

        :param change: The change of this SymbolFutures.  # noqa: E501
        :type: float
        """

        self._change = change

    @property
    def change_percent(self):
        """Gets the change_percent of this SymbolFutures.  # noqa: E501

        Относительное изменение цены  # noqa: E501

        :return: The change_percent of this SymbolFutures.  # noqa: E501
        :rtype: float
        """
        return self._change_percent

    @change_percent.setter
    def change_percent(self, change_percent):
        """Sets the change_percent of this SymbolFutures.

        Относительное изменение цены  # noqa: E501

        :param change_percent: The change_percent of this SymbolFutures.  # noqa: E501
        :type: float
        """

        self._change_percent = change_percent

    @property
    def high_price(self):
        """Gets the high_price of this SymbolFutures.  # noqa: E501

        Максимальная цена  # noqa: E501

        :return: The high_price of this SymbolFutures.  # noqa: E501
        :rtype: float
        """
        return self._high_price

    @high_price.setter
    def high_price(self, high_price):
        """Sets the high_price of this SymbolFutures.

        Максимальная цена  # noqa: E501

        :param high_price: The high_price of this SymbolFutures.  # noqa: E501
        :type: float
        """

        self._high_price = high_price

    @property
    def low_price(self):
        """Gets the low_price of this SymbolFutures.  # noqa: E501

        Минимальная цена  # noqa: E501

        :return: The low_price of this SymbolFutures.  # noqa: E501
        :rtype: float
        """
        return self._low_price

    @low_price.setter
    def low_price(self, low_price):
        """Sets the low_price of this SymbolFutures.

        Минимальная цена  # noqa: E501

        :param low_price: The low_price of this SymbolFutures.  # noqa: E501
        :type: float
        """

        self._low_price = low_price

    @property
    def accrued_int(self):
        """Gets the accrued_int of this SymbolFutures.  # noqa: E501

        Начислено  # noqa: E501

        :return: The accrued_int of this SymbolFutures.  # noqa: E501
        :rtype: int
        """
        return self._accrued_int

    @accrued_int.setter
    def accrued_int(self, accrued_int):
        """Sets the accrued_int of this SymbolFutures.

        Начислено  # noqa: E501

        :param accrued_int: The accrued_int of this SymbolFutures.  # noqa: E501
        :type: int
        """

        self._accrued_int = accrued_int

    @property
    def accrued_interest(self):
        """Gets the accrued_interest of this SymbolFutures.  # noqa: E501

        Начислено  # noqa: E501

        :return: The accrued_interest of this SymbolFutures.  # noqa: E501
        :rtype: int
        """
        return self._accrued_interest

    @accrued_interest.setter
    def accrued_interest(self, accrued_interest):
        """Sets the accrued_interest of this SymbolFutures.

        Начислено  # noqa: E501

        :param accrued_interest: The accrued_interest of this SymbolFutures.  # noqa: E501
        :type: int
        """

        self._accrued_interest = accrued_interest

    @property
    def volume(self):
        """Gets the volume of this SymbolFutures.  # noqa: E501

        Объём  # noqa: E501

        :return: The volume of this SymbolFutures.  # noqa: E501
        :rtype: float
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this SymbolFutures.

        Объём  # noqa: E501

        :param volume: The volume of this SymbolFutures.  # noqa: E501
        :type: float
        """

        self._volume = volume

    @property
    def open_price(self):
        """Gets the open_price of this SymbolFutures.  # noqa: E501

        Цена открытия  # noqa: E501

        :return: The open_price of this SymbolFutures.  # noqa: E501
        :rtype: float
        """
        return self._open_price

    @open_price.setter
    def open_price(self, open_price):
        """Sets the open_price of this SymbolFutures.

        Цена открытия  # noqa: E501

        :param open_price: The open_price of this SymbolFutures.  # noqa: E501
        :type: float
        """

        self._open_price = open_price

    @property
    def _yield(self):
        """Gets the _yield of this SymbolFutures.  # noqa: E501


        :return: The _yield of this SymbolFutures.  # noqa: E501
        :rtype: int
        """
        return self.__yield

    @_yield.setter
    def _yield(self, _yield):
        """Sets the _yield of this SymbolFutures.


        :param _yield: The _yield of this SymbolFutures.  # noqa: E501
        :type: int
        """

        self.__yield = _yield

    @property
    def lotsize(self):
        """Gets the lotsize of this SymbolFutures.  # noqa: E501

        Размер лота  # noqa: E501

        :return: The lotsize of this SymbolFutures.  # noqa: E501
        :rtype: float
        """
        return self._lotsize

    @lotsize.setter
    def lotsize(self, lotsize):
        """Sets the lotsize of this SymbolFutures.

        Размер лота  # noqa: E501

        :param lotsize: The lotsize of this SymbolFutures.  # noqa: E501
        :type: float
        """

        self._lotsize = lotsize

    @property
    def lotvalue(self):
        """Gets the lotvalue of this SymbolFutures.  # noqa: E501


        :return: The lotvalue of this SymbolFutures.  # noqa: E501
        :rtype: float
        """
        return self._lotvalue

    @lotvalue.setter
    def lotvalue(self, lotvalue):
        """Sets the lotvalue of this SymbolFutures.


        :param lotvalue: The lotvalue of this SymbolFutures.  # noqa: E501
        :type: float
        """

        self._lotvalue = lotvalue

    @property
    def facevalue(self):
        """Gets the facevalue of this SymbolFutures.  # noqa: E501


        :return: The facevalue of this SymbolFutures.  # noqa: E501
        :rtype: float
        """
        return self._facevalue

    @facevalue.setter
    def facevalue(self, facevalue):
        """Sets the facevalue of this SymbolFutures.


        :param facevalue: The facevalue of this SymbolFutures.  # noqa: E501
        :type: float
        """

        self._facevalue = facevalue

    @property
    def type(self):
        """Gets the type of this SymbolFutures.  # noqa: E501


        :return: The type of this SymbolFutures.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SymbolFutures.


        :param type: The type of this SymbolFutures.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SymbolFutures, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SymbolFutures):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
