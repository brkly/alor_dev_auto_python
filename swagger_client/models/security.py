# coding: utf-8

"""
    Alor OpenAPI V2

    <small>Swagger-документация для API v1 доступна по ссылке&#58; <a href=\"https://alor.dev/rawdocs/WarpOpenApi3.yml\">https://alor.dev/rawdocs/WarpOpenApi3.yml</a></small><br><br> API для работы с торговой системой АЛОР Брокер. Предоставляет интерфейсы для выставления заявок и получения биржевой информации.  Данные для неавторизованных запросов предоставляются с 15-минутной задержкой, для авторизованных - без задержек.   Публичная биржевая информация может быть получена через HTTP(S) API, а также доступна через однократно установленное WebSocket соединение. <br> **Внимание!** WebSocket соединения могут и будут разрываться *(например, если клиент не успевает обрабатывать сообщения и на стороне API в буфере накопится более 5000 событий)*. <br> Во внешнем ПО необходимо предусмотреть механизмы переподключения и переподписки (при необходимости)! <br> <br>  В OpenAPI V2 \"Санкт-Петербургская биржа\" (SPBX) еще находится в процессе разработки. Доступно получение рыночных данных *(marketdata, md)*. Заявки на SPBX в V2 пока недоступны. В V1 торговый функционал для SPBX доступен.  <h4> Доступные типы данных </h4>  * Все сделки  * Все заявки  * Информация по инструментам  * Котировки  * Биржевые стаканы  * Исторические данные  * Позиции  * Информация о клиенте  <h4>Поддерживаемые виды заявок</h4>  * рыночные  * лимитные  * стоп-лосс  * тейк-профит  * стоп-лосс лимит  * тейк-профит лимит  <h4>    Ограничения по частоте запросов     </h4> <p>На текущий момент ограничений по количеству запросов в минуту или WebSocket-подписок нет. <br/> Сервер может обрабатывать \"тяжелые\" запросы (пример - история за все время) и запросы без авторизации с меньшим приоритетом. <br/> АЛОР оставляет за собой право на ограничение частоты запросов, если это будет необходимо для стабильной работы системы. <br/> <br/></p>   <h2> Авторизация </h2>  <h4>OAuth</h4>  <b>Внимание!</b>   JWT и refresh token — равносильны логину и паролю. Их нужно скрывать от публичного доступа.  <h4>Для разработчиков сторонних приложений, в которых торговлю будут вести их пользователи.</h4>  Мы предоставляем сервис для авторизации сторониих приложений по стандарту OAuth 2.0. С примером приложения, использующего OAuth сервис для авторизации пользователей можно ознакомиться в разделе  <a href=\"/examples\">Примеры</a>.  Список разрешений (scopes), которые могут быть выданы приложению: <table>   <tr>     <td><b>OrdersRead</b></td>     <td>Чтение выставленных заявок</td>   </tr>   <tr>     <td><b>OrdersCreate</b></td>     <td>Выставление заявок</td>   </tr>   <tr>     <td><b>Trades</b></td>     <td>Чтение совершенных сделок</td>   </tr>   <tr>     <td><b>Personal</b></td>     <td>Персональная информация: ФИО, почта и т.п.</td>   </tr>   <tr>     <td><b>Stats</b></td>     <td>Статистика: прибыль, средние цены и т.п.</td>   </tr> </table>  <h4>Для ведения операций от своего имени</h4>  Выписать себе <b>refresh token</b> для ведения операций от своего имени [можно здесь](https://alor.dev/open-api-tokens).  <h2>Краткое описание работы с авторизацией</h2>  Чтобы выполнить авторизованный запрос, добавьте в запрос заголовок с именем \"Authorization\" и значением, состоящим из префикса `\"Bearer \"` и валидного JWT токена.  Срок жизни JWT короткий: это сделано для безопасности.  Для большинства вариантов использования API мы рекоммендуем использовать механизм  <b>refresh token</b> .  Механизм  <b>refresh token</b>  позволяет получать JWT с новым сроком жизни. Для этого отправьте POST запрос на адрес `https://oauthdev.alor.ru/refresh?token={refreshToken}` *(игровой контур)* или `https://oauth.alor.ru/refresh?token={refreshToken}` *(боевой контур)*. Если у  <b>refresh token</b>  не истек срок жизни и не он не был отозван, то в теле ответа в поле AccessToken вернётся свежий JWT токен.   Срок жизни  <b>refresh token</b>, получаемого обычным способом — 1 месяц.   Срок жизни  <b>refresh token</b>, получаемого самостоятельным выписыванием — год.  | |-  > Если мы для вас не завели портфели для ведения торговли в игровом контуре, оставьте заявку на <a href=\"mailto:openapi@alor.ru\">openapi@alor.ru</a> или свяжитесь с нами в [телеграме](https://tgmssg.ru/AlorOpenAPI).  </br></br> Игровой контур: `https://apidev.alor.ru`  Боевой контур: `https://api.alor.ru`   # noqa: E501

    OpenAPI spec version: 1.0
    Contact: openapi@alor.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Security(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'symbol': 'str',
        'shortname': 'str',
        'description': 'str',
        'exchange': 'str',
        'type': 'str',
        'lotsize': 'float',
        'facevalue': 'float',
        'cfi_code': 'str',
        'cancellation': 'str',
        'minstep': 'float',
        'rating': 'float',
        'marginbuy': 'float',
        'marginsell': 'float',
        'marginrate': 'float',
        'pricestep': 'float',
        'price_max': 'float',
        'price_min': 'float',
        'theor_price': 'float',
        'theor_price_limit': 'float',
        'volatility': 'float',
        'currency': 'str',
        'isin': 'str',
        '_yield': 'str',
        'primary_board': 'str'
    }

    attribute_map = {
        'symbol': 'symbol',
        'shortname': 'shortname',
        'description': 'description',
        'exchange': 'exchange',
        'type': 'type',
        'lotsize': 'lotsize',
        'facevalue': 'facevalue',
        'cfi_code': 'cfiCode',
        'cancellation': 'cancellation',
        'minstep': 'minstep',
        'rating': 'rating',
        'marginbuy': 'marginbuy',
        'marginsell': 'marginsell',
        'marginrate': 'marginrate',
        'pricestep': 'pricestep',
        'price_max': 'priceMax',
        'price_min': 'priceMin',
        'theor_price': 'theorPrice',
        'theor_price_limit': 'theorPriceLimit',
        'volatility': 'volatility',
        'currency': 'currency',
        'isin': 'ISIN',
        '_yield': 'yield',
        'primary_board': 'primary_board'
    }

    def __init__(self, symbol=None, shortname=None, description=None, exchange=None, type=None, lotsize=None, facevalue=None, cfi_code=None, cancellation=None, minstep=None, rating=None, marginbuy=None, marginsell=None, marginrate=None, pricestep=None, price_max=None, price_min=None, theor_price=None, theor_price_limit=None, volatility=None, currency=None, isin=None, _yield=None, primary_board=None):  # noqa: E501
        """Security - a model defined in Swagger"""  # noqa: E501
        self._symbol = None
        self._shortname = None
        self._description = None
        self._exchange = None
        self._type = None
        self._lotsize = None
        self._facevalue = None
        self._cfi_code = None
        self._cancellation = None
        self._minstep = None
        self._rating = None
        self._marginbuy = None
        self._marginsell = None
        self._marginrate = None
        self._pricestep = None
        self._price_max = None
        self._price_min = None
        self._theor_price = None
        self._theor_price_limit = None
        self._volatility = None
        self._currency = None
        self._isin = None
        self.__yield = None
        self._primary_board = None
        self.discriminator = None
        if symbol is not None:
            self.symbol = symbol
        if shortname is not None:
            self.shortname = shortname
        if description is not None:
            self.description = description
        if exchange is not None:
            self.exchange = exchange
        if type is not None:
            self.type = type
        if lotsize is not None:
            self.lotsize = lotsize
        if facevalue is not None:
            self.facevalue = facevalue
        if cfi_code is not None:
            self.cfi_code = cfi_code
        if cancellation is not None:
            self.cancellation = cancellation
        if minstep is not None:
            self.minstep = minstep
        if rating is not None:
            self.rating = rating
        if marginbuy is not None:
            self.marginbuy = marginbuy
        if marginsell is not None:
            self.marginsell = marginsell
        if marginrate is not None:
            self.marginrate = marginrate
        if pricestep is not None:
            self.pricestep = pricestep
        if price_max is not None:
            self.price_max = price_max
        if price_min is not None:
            self.price_min = price_min
        if theor_price is not None:
            self.theor_price = theor_price
        if theor_price_limit is not None:
            self.theor_price_limit = theor_price_limit
        if volatility is not None:
            self.volatility = volatility
        if currency is not None:
            self.currency = currency
        if isin is not None:
            self.isin = isin
        if _yield is not None:
            self._yield = _yield
        if primary_board is not None:
            self.primary_board = primary_board

    @property
    def symbol(self):
        """Gets the symbol of this Security.  # noqa: E501

        Тикер (Код финансового инструмента)  # noqa: E501

        :return: The symbol of this Security.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this Security.

        Тикер (Код финансового инструмента)  # noqa: E501

        :param symbol: The symbol of this Security.  # noqa: E501
        :type: str
        """

        self._symbol = symbol

    @property
    def shortname(self):
        """Gets the shortname of this Security.  # noqa: E501

        Краткое наименование инструмента  # noqa: E501

        :return: The shortname of this Security.  # noqa: E501
        :rtype: str
        """
        return self._shortname

    @shortname.setter
    def shortname(self, shortname):
        """Sets the shortname of this Security.

        Краткое наименование инструмента  # noqa: E501

        :param shortname: The shortname of this Security.  # noqa: E501
        :type: str
        """

        self._shortname = shortname

    @property
    def description(self):
        """Gets the description of this Security.  # noqa: E501

        Краткое описание инструмента  # noqa: E501

        :return: The description of this Security.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Security.

        Краткое описание инструмента  # noqa: E501

        :param description: The description of this Security.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def exchange(self):
        """Gets the exchange of this Security.  # noqa: E501

        Биржа  # noqa: E501

        :return: The exchange of this Security.  # noqa: E501
        :rtype: str
        """
        return self._exchange

    @exchange.setter
    def exchange(self, exchange):
        """Sets the exchange of this Security.

        Биржа  # noqa: E501

        :param exchange: The exchange of this Security.  # noqa: E501
        :type: str
        """

        self._exchange = exchange

    @property
    def type(self):
        """Gets the type of this Security.  # noqa: E501

        Тип  # noqa: E501

        :return: The type of this Security.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Security.

        Тип  # noqa: E501

        :param type: The type of this Security.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def lotsize(self):
        """Gets the lotsize of this Security.  # noqa: E501

        Размер лота  # noqa: E501

        :return: The lotsize of this Security.  # noqa: E501
        :rtype: float
        """
        return self._lotsize

    @lotsize.setter
    def lotsize(self, lotsize):
        """Sets the lotsize of this Security.

        Размер лота  # noqa: E501

        :param lotsize: The lotsize of this Security.  # noqa: E501
        :type: float
        """

        self._lotsize = lotsize

    @property
    def facevalue(self):
        """Gets the facevalue of this Security.  # noqa: E501

        Номинальная стоимость  # noqa: E501

        :return: The facevalue of this Security.  # noqa: E501
        :rtype: float
        """
        return self._facevalue

    @facevalue.setter
    def facevalue(self, facevalue):
        """Sets the facevalue of this Security.

        Номинальная стоимость  # noqa: E501

        :param facevalue: The facevalue of this Security.  # noqa: E501
        :type: float
        """

        self._facevalue = facevalue

    @property
    def cfi_code(self):
        """Gets the cfi_code of this Security.  # noqa: E501

        Тип ценной бумаги согласно стандарту ISO 10962  # noqa: E501

        :return: The cfi_code of this Security.  # noqa: E501
        :rtype: str
        """
        return self._cfi_code

    @cfi_code.setter
    def cfi_code(self, cfi_code):
        """Sets the cfi_code of this Security.

        Тип ценной бумаги согласно стандарту ISO 10962  # noqa: E501

        :param cfi_code: The cfi_code of this Security.  # noqa: E501
        :type: str
        """

        self._cfi_code = cfi_code

    @property
    def cancellation(self):
        """Gets the cancellation of this Security.  # noqa: E501

        Дата и время (UTC) окончания действия  # noqa: E501

        :return: The cancellation of this Security.  # noqa: E501
        :rtype: str
        """
        return self._cancellation

    @cancellation.setter
    def cancellation(self, cancellation):
        """Sets the cancellation of this Security.

        Дата и время (UTC) окончания действия  # noqa: E501

        :param cancellation: The cancellation of this Security.  # noqa: E501
        :type: str
        """

        self._cancellation = cancellation

    @property
    def minstep(self):
        """Gets the minstep of this Security.  # noqa: E501

        Минимальный шаг цены  # noqa: E501

        :return: The minstep of this Security.  # noqa: E501
        :rtype: float
        """
        return self._minstep

    @minstep.setter
    def minstep(self, minstep):
        """Sets the minstep of this Security.

        Минимальный шаг цены  # noqa: E501

        :param minstep: The minstep of this Security.  # noqa: E501
        :type: float
        """

        self._minstep = minstep

    @property
    def rating(self):
        """Gets the rating of this Security.  # noqa: E501


        :return: The rating of this Security.  # noqa: E501
        :rtype: float
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this Security.


        :param rating: The rating of this Security.  # noqa: E501
        :type: float
        """

        self._rating = rating

    @property
    def marginbuy(self):
        """Gets the marginbuy of this Security.  # noqa: E501

        Цена маржинальной покупки (заемные средства)  # noqa: E501

        :return: The marginbuy of this Security.  # noqa: E501
        :rtype: float
        """
        return self._marginbuy

    @marginbuy.setter
    def marginbuy(self, marginbuy):
        """Sets the marginbuy of this Security.

        Цена маржинальной покупки (заемные средства)  # noqa: E501

        :param marginbuy: The marginbuy of this Security.  # noqa: E501
        :type: float
        """

        self._marginbuy = marginbuy

    @property
    def marginsell(self):
        """Gets the marginsell of this Security.  # noqa: E501

        Цена маржинальной продажи (заемные средства)  # noqa: E501

        :return: The marginsell of this Security.  # noqa: E501
        :rtype: float
        """
        return self._marginsell

    @marginsell.setter
    def marginsell(self, marginsell):
        """Sets the marginsell of this Security.

        Цена маржинальной продажи (заемные средства)  # noqa: E501

        :param marginsell: The marginsell of this Security.  # noqa: E501
        :type: float
        """

        self._marginsell = marginsell

    @property
    def marginrate(self):
        """Gets the marginrate of this Security.  # noqa: E501

        Отношение цены маржинальной покупки к цене последней сделки  # noqa: E501

        :return: The marginrate of this Security.  # noqa: E501
        :rtype: float
        """
        return self._marginrate

    @marginrate.setter
    def marginrate(self, marginrate):
        """Sets the marginrate of this Security.

        Отношение цены маржинальной покупки к цене последней сделки  # noqa: E501

        :param marginrate: The marginrate of this Security.  # noqa: E501
        :type: float
        """

        self._marginrate = marginrate

    @property
    def pricestep(self):
        """Gets the pricestep of this Security.  # noqa: E501

        Минимальный шаг цены, выраженный в рублях  # noqa: E501

        :return: The pricestep of this Security.  # noqa: E501
        :rtype: float
        """
        return self._pricestep

    @pricestep.setter
    def pricestep(self, pricestep):
        """Sets the pricestep of this Security.

        Минимальный шаг цены, выраженный в рублях  # noqa: E501

        :param pricestep: The pricestep of this Security.  # noqa: E501
        :type: float
        """

        self._pricestep = pricestep

    @property
    def price_max(self):
        """Gets the price_max of this Security.  # noqa: E501

        Максимальная цена  # noqa: E501

        :return: The price_max of this Security.  # noqa: E501
        :rtype: float
        """
        return self._price_max

    @price_max.setter
    def price_max(self, price_max):
        """Sets the price_max of this Security.

        Максимальная цена  # noqa: E501

        :param price_max: The price_max of this Security.  # noqa: E501
        :type: float
        """

        self._price_max = price_max

    @property
    def price_min(self):
        """Gets the price_min of this Security.  # noqa: E501

        Минимальная цена  # noqa: E501

        :return: The price_min of this Security.  # noqa: E501
        :rtype: float
        """
        return self._price_min

    @price_min.setter
    def price_min(self, price_min):
        """Sets the price_min of this Security.

        Минимальная цена  # noqa: E501

        :param price_min: The price_min of this Security.  # noqa: E501
        :type: float
        """

        self._price_min = price_min

    @property
    def theor_price(self):
        """Gets the theor_price of this Security.  # noqa: E501


        :return: The theor_price of this Security.  # noqa: E501
        :rtype: float
        """
        return self._theor_price

    @theor_price.setter
    def theor_price(self, theor_price):
        """Sets the theor_price of this Security.


        :param theor_price: The theor_price of this Security.  # noqa: E501
        :type: float
        """

        self._theor_price = theor_price

    @property
    def theor_price_limit(self):
        """Gets the theor_price_limit of this Security.  # noqa: E501


        :return: The theor_price_limit of this Security.  # noqa: E501
        :rtype: float
        """
        return self._theor_price_limit

    @theor_price_limit.setter
    def theor_price_limit(self, theor_price_limit):
        """Sets the theor_price_limit of this Security.


        :param theor_price_limit: The theor_price_limit of this Security.  # noqa: E501
        :type: float
        """

        self._theor_price_limit = theor_price_limit

    @property
    def volatility(self):
        """Gets the volatility of this Security.  # noqa: E501

        Волативность  # noqa: E501

        :return: The volatility of this Security.  # noqa: E501
        :rtype: float
        """
        return self._volatility

    @volatility.setter
    def volatility(self, volatility):
        """Sets the volatility of this Security.

        Волативность  # noqa: E501

        :param volatility: The volatility of this Security.  # noqa: E501
        :type: float
        """

        self._volatility = volatility

    @property
    def currency(self):
        """Gets the currency of this Security.  # noqa: E501

        Валюта  # noqa: E501

        :return: The currency of this Security.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Security.

        Валюта  # noqa: E501

        :param currency: The currency of this Security.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def isin(self):
        """Gets the isin of this Security.  # noqa: E501

        Идентификатор ценной бумаги согласно стандарту ISO 6166  # noqa: E501

        :return: The isin of this Security.  # noqa: E501
        :rtype: str
        """
        return self._isin

    @isin.setter
    def isin(self, isin):
        """Sets the isin of this Security.

        Идентификатор ценной бумаги согласно стандарту ISO 6166  # noqa: E501

        :param isin: The isin of this Security.  # noqa: E501
        :type: str
        """

        self._isin = isin

    @property
    def _yield(self):
        """Gets the _yield of this Security.  # noqa: E501


        :return: The _yield of this Security.  # noqa: E501
        :rtype: str
        """
        return self.__yield

    @_yield.setter
    def _yield(self, _yield):
        """Sets the _yield of this Security.


        :param _yield: The _yield of this Security.  # noqa: E501
        :type: str
        """

        self.__yield = _yield

    @property
    def primary_board(self):
        """Gets the primary_board of this Security.  # noqa: E501

        Код режима торгов  # noqa: E501

        :return: The primary_board of this Security.  # noqa: E501
        :rtype: str
        """
        return self._primary_board

    @primary_board.setter
    def primary_board(self, primary_board):
        """Sets the primary_board of this Security.

        Код режима торгов  # noqa: E501

        :param primary_board: The primary_board of this Security.  # noqa: E501
        :type: str
        """

        self._primary_board = primary_board

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Security, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Security):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
