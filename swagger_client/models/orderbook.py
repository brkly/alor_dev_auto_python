# coding: utf-8

"""
    Alor OpenAPI V2

    <small>Swagger-документация для API v1 доступна по ссылке&#58; <a href=\"https://alor.dev/rawdocs/WarpOpenApi3.yml\">https://alor.dev/rawdocs/WarpOpenApi3.yml</a></small><br><br> API для работы с торговой системой АЛОР Брокер. Предоставляет интерфейсы для выставления заявок и получения биржевой информации.  Данные для неавторизованных запросов предоставляются с 15-минутной задержкой, для авторизованных - без задержек.   Публичная биржевая информация может быть получена через HTTP(S) API, а также доступна через однократно установленное WebSocket соединение. <br> **Внимание!** WebSocket соединения могут и будут разрываться *(например, если клиент не успевает обрабатывать сообщения и на стороне API в буфере накопится более 5000 событий)*. <br> Во внешнем ПО необходимо предусмотреть механизмы переподключения и переподписки (при необходимости)! <br> <br>  В OpenAPI V2 \"Санкт-Петербургская биржа\" (SPBX) еще находится в процессе разработки. Доступно получение рыночных данных *(marketdata, md)*. Заявки на SPBX в V2 пока недоступны. В V1 торговый функционал для SPBX доступен.  <h4> Доступные типы данных </h4>  * Все сделки  * Все заявки  * Информация по инструментам  * Котировки  * Биржевые стаканы  * Исторические данные  * Позиции  * Информация о клиенте  <h4>Поддерживаемые виды заявок</h4>  * рыночные  * лимитные  * стоп-лосс  * тейк-профит  * стоп-лосс лимит  * тейк-профит лимит  <h4>    Ограничения по частоте запросов     </h4> <p>На текущий момент ограничений по количеству запросов в минуту или WebSocket-подписок нет. <br/> Сервер может обрабатывать \"тяжелые\" запросы (пример - история за все время) и запросы без авторизации с меньшим приоритетом. <br/> АЛОР оставляет за собой право на ограничение частоты запросов, если это будет необходимо для стабильной работы системы. <br/> <br/></p>   <h2> Авторизация </h2>  <h4>OAuth</h4>  <b>Внимание!</b>   JWT и refresh token — равносильны логину и паролю. Их нужно скрывать от публичного доступа.  <h4>Для разработчиков сторонних приложений, в которых торговлю будут вести их пользователи.</h4>  Мы предоставляем сервис для авторизации сторониих приложений по стандарту OAuth 2.0. С примером приложения, использующего OAuth сервис для авторизации пользователей можно ознакомиться в разделе  <a href=\"/examples\">Примеры</a>.  Список разрешений (scopes), которые могут быть выданы приложению: <table>   <tr>     <td><b>OrdersRead</b></td>     <td>Чтение выставленных заявок</td>   </tr>   <tr>     <td><b>OrdersCreate</b></td>     <td>Выставление заявок</td>   </tr>   <tr>     <td><b>Trades</b></td>     <td>Чтение совершенных сделок</td>   </tr>   <tr>     <td><b>Personal</b></td>     <td>Персональная информация: ФИО, почта и т.п.</td>   </tr>   <tr>     <td><b>Stats</b></td>     <td>Статистика: прибыль, средние цены и т.п.</td>   </tr> </table>  <h4>Для ведения операций от своего имени</h4>  Выписать себе <b>refresh token</b> для ведения операций от своего имени [можно здесь](https://alor.dev/open-api-tokens).  <h2>Краткое описание работы с авторизацией</h2>  Чтобы выполнить авторизованный запрос, добавьте в запрос заголовок с именем \"Authorization\" и значением, состоящим из префикса `\"Bearer \"` и валидного JWT токена.  Срок жизни JWT короткий: это сделано для безопасности.  Для большинства вариантов использования API мы рекоммендуем использовать механизм  <b>refresh token</b> .  Механизм  <b>refresh token</b>  позволяет получать JWT с новым сроком жизни. Для этого отправьте POST запрос на адрес `https://oauthdev.alor.ru/refresh?token={refreshToken}` *(игровой контур)* или `https://oauth.alor.ru/refresh?token={refreshToken}` *(боевой контур)*. Если у  <b>refresh token</b>  не истек срок жизни и не он не был отозван, то в теле ответа в поле AccessToken вернётся свежий JWT токен.   Срок жизни  <b>refresh token</b>, получаемого обычным способом — 1 месяц.   Срок жизни  <b>refresh token</b>, получаемого самостоятельным выписыванием — год.  | |-  > Если мы для вас не завели портфели для ведения торговли в игровом контуре, оставьте заявку на <a href=\"mailto:openapi@alor.ru\">openapi@alor.ru</a> или свяжитесь с нами в [телеграме](https://tgmssg.ru/AlorOpenAPI).  </br></br> Игровой контур: `https://apidev.alor.ru`  Боевой контур: `https://api.alor.ru`   # noqa: E501

    OpenAPI spec version: 1.0
    Contact: openapi@alor.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Orderbook(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'snapshot': 'bool',
        'bids': 'list[OrderbookBid]',
        'asks': 'list[OrderbookAsk]',
        'timestamp': 'float',
        'ms_timestamp': 'float',
        'existing': 'bool'
    }

    attribute_map = {
        'snapshot': 'snapshot',
        'bids': 'bids',
        'asks': 'asks',
        'timestamp': 'timestamp',
        'ms_timestamp': 'ms_timestamp',
        'existing': 'existing'
    }

    def __init__(self, snapshot=None, bids=None, asks=None, timestamp=None, ms_timestamp=None, existing=None):  # noqa: E501
        """Orderbook - a model defined in Swagger"""  # noqa: E501
        self._snapshot = None
        self._bids = None
        self._asks = None
        self._timestamp = None
        self._ms_timestamp = None
        self._existing = None
        self.discriminator = None
        if snapshot is not None:
            self.snapshot = snapshot
        if bids is not None:
            self.bids = bids
        if asks is not None:
            self.asks = asks
        if timestamp is not None:
            self.timestamp = timestamp
        if ms_timestamp is not None:
            self.ms_timestamp = ms_timestamp
        if existing is not None:
            self.existing = existing

    @property
    def snapshot(self):
        """Gets the snapshot of this Orderbook.  # noqa: E501

        Deprecated. Устаревшее поле, будет удалено в будущих обновлениях.  # noqa: E501

        :return: The snapshot of this Orderbook.  # noqa: E501
        :rtype: bool
        """
        return self._snapshot

    @snapshot.setter
    def snapshot(self, snapshot):
        """Sets the snapshot of this Orderbook.

        Deprecated. Устаревшее поле, будет удалено в будущих обновлениях.  # noqa: E501

        :param snapshot: The snapshot of this Orderbook.  # noqa: E501
        :type: bool
        """

        self._snapshot = snapshot

    @property
    def bids(self):
        """Gets the bids of this Orderbook.  # noqa: E501

        Биды  # noqa: E501

        :return: The bids of this Orderbook.  # noqa: E501
        :rtype: list[OrderbookBid]
        """
        return self._bids

    @bids.setter
    def bids(self, bids):
        """Sets the bids of this Orderbook.

        Биды  # noqa: E501

        :param bids: The bids of this Orderbook.  # noqa: E501
        :type: list[OrderbookBid]
        """

        self._bids = bids

    @property
    def asks(self):
        """Gets the asks of this Orderbook.  # noqa: E501

        Аски  # noqa: E501

        :return: The asks of this Orderbook.  # noqa: E501
        :rtype: list[OrderbookAsk]
        """
        return self._asks

    @asks.setter
    def asks(self, asks):
        """Sets the asks of this Orderbook.

        Аски  # noqa: E501

        :param asks: The asks of this Orderbook.  # noqa: E501
        :type: list[OrderbookAsk]
        """

        self._asks = asks

    @property
    def timestamp(self):
        """Gets the timestamp of this Orderbook.  # noqa: E501

        Deprecated. Устаревшее поле, будет удалено в будущих обновлениях. Вместо этого поля используйте поле \"ms_timestamp\".  # noqa: E501

        :return: The timestamp of this Orderbook.  # noqa: E501
        :rtype: float
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Orderbook.

        Deprecated. Устаревшее поле, будет удалено в будущих обновлениях. Вместо этого поля используйте поле \"ms_timestamp\".  # noqa: E501

        :param timestamp: The timestamp of this Orderbook.  # noqa: E501
        :type: float
        """

        self._timestamp = timestamp

    @property
    def ms_timestamp(self):
        """Gets the ms_timestamp of this Orderbook.  # noqa: E501

        Время(UTC) в формате Unix Time Milliseconds  # noqa: E501

        :return: The ms_timestamp of this Orderbook.  # noqa: E501
        :rtype: float
        """
        return self._ms_timestamp

    @ms_timestamp.setter
    def ms_timestamp(self, ms_timestamp):
        """Sets the ms_timestamp of this Orderbook.

        Время(UTC) в формате Unix Time Milliseconds  # noqa: E501

        :param ms_timestamp: The ms_timestamp of this Orderbook.  # noqa: E501
        :type: float
        """

        self._ms_timestamp = ms_timestamp

    @property
    def existing(self):
        """Gets the existing of this Orderbook.  # noqa: E501

        True - для данных из \"снепшота\", то есть из истории. False - для новых событий  # noqa: E501

        :return: The existing of this Orderbook.  # noqa: E501
        :rtype: bool
        """
        return self._existing

    @existing.setter
    def existing(self, existing):
        """Sets the existing of this Orderbook.

        True - для данных из \"снепшота\", то есть из истории. False - для новых событий  # noqa: E501

        :param existing: The existing of this Orderbook.  # noqa: E501
        :type: bool
        """

        self._existing = existing

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Orderbook, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Orderbook):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
