# coding: utf-8

"""
    Alor OpenAPI V2

    <small>Swagger-документация для API v1 доступна по ссылке&#58; <a href=\"https://alor.dev/rawdocs/WarpOpenApi3.yml\">https://alor.dev/rawdocs/WarpOpenApi3.yml</a></small><br><br> API для работы с торговой системой АЛОР Брокер. Предоставляет интерфейсы для выставления заявок и получения биржевой информации.  Данные для неавторизованных запросов предоставляются с 15-минутной задержкой, для авторизованных - без задержек.   Публичная биржевая информация может быть получена через HTTP(S) API, а также доступна через однократно установленное WebSocket соединение. <br> **Внимание!** WebSocket соединения могут и будут разрываться *(например, если клиент не успевает обрабатывать сообщения и на стороне API в буфере накопится более 5000 событий)*. <br> Во внешнем ПО необходимо предусмотреть механизмы переподключения и переподписки (при необходимости)! <br> <br>  В OpenAPI V2 \"Санкт-Петербургская биржа\" (SPBX) еще находится в процессе разработки. Доступно получение рыночных данных *(marketdata, md)*. Заявки на SPBX в V2 пока недоступны. В V1 торговый функционал для SPBX доступен.  <h4> Доступные типы данных </h4>  * Все сделки  * Все заявки  * Информация по инструментам  * Котировки  * Биржевые стаканы  * Исторические данные  * Позиции  * Информация о клиенте  <h4>Поддерживаемые виды заявок</h4>  * рыночные  * лимитные  * стоп-лосс  * тейк-профит  * стоп-лосс лимит  * тейк-профит лимит  <h4>    Ограничения по частоте запросов     </h4> <p>На текущий момент ограничений по количеству запросов в минуту или WebSocket-подписок нет. <br/> Сервер может обрабатывать \"тяжелые\" запросы (пример - история за все время) и запросы без авторизации с меньшим приоритетом. <br/> АЛОР оставляет за собой право на ограничение частоты запросов, если это будет необходимо для стабильной работы системы. <br/> <br/></p>   <h2> Авторизация </h2>  <h4>OAuth</h4>  <b>Внимание!</b>   JWT и refresh token — равносильны логину и паролю. Их нужно скрывать от публичного доступа.  <h4>Для разработчиков сторонних приложений, в которых торговлю будут вести их пользователи.</h4>  Мы предоставляем сервис для авторизации сторониих приложений по стандарту OAuth 2.0. С примером приложения, использующего OAuth сервис для авторизации пользователей можно ознакомиться в разделе  <a href=\"/examples\">Примеры</a>.  Список разрешений (scopes), которые могут быть выданы приложению: <table>   <tr>     <td><b>OrdersRead</b></td>     <td>Чтение выставленных заявок</td>   </tr>   <tr>     <td><b>OrdersCreate</b></td>     <td>Выставление заявок</td>   </tr>   <tr>     <td><b>Trades</b></td>     <td>Чтение совершенных сделок</td>   </tr>   <tr>     <td><b>Personal</b></td>     <td>Персональная информация: ФИО, почта и т.п.</td>   </tr>   <tr>     <td><b>Stats</b></td>     <td>Статистика: прибыль, средние цены и т.п.</td>   </tr> </table>  <h4>Для ведения операций от своего имени</h4>  Выписать себе <b>refresh token</b> для ведения операций от своего имени [можно здесь](https://alor.dev/open-api-tokens).  <h2>Краткое описание работы с авторизацией</h2>  Чтобы выполнить авторизованный запрос, добавьте в запрос заголовок с именем \"Authorization\" и значением, состоящим из префикса `\"Bearer \"` и валидного JWT токена.  Срок жизни JWT короткий: это сделано для безопасности.  Для большинства вариантов использования API мы рекоммендуем использовать механизм  <b>refresh token</b> .  Механизм  <b>refresh token</b>  позволяет получать JWT с новым сроком жизни. Для этого отправьте POST запрос на адрес `https://oauthdev.alor.ru/refresh?token={refreshToken}` *(игровой контур)* или `https://oauth.alor.ru/refresh?token={refreshToken}` *(боевой контур)*. Если у  <b>refresh token</b>  не истек срок жизни и не он не был отозван, то в теле ответа в поле AccessToken вернётся свежий JWT токен.   Срок жизни  <b>refresh token</b>, получаемого обычным способом — 1 месяц.   Срок жизни  <b>refresh token</b>, получаемого самостоятельным выписыванием — год.  | |-  > Если мы для вас не завели портфели для ведения торговли в игровом контуре, оставьте заявку на <a href=\"mailto:openapi@alor.ru\">openapi@alor.ru</a> или свяжитесь с нами в [телеграме](https://tgmssg.ru/AlorOpenAPI).  </br></br> Игровой контур: `https://apidev.alor.ru`  Боевой контур: `https://api.alor.ru`   # noqa: E501

    OpenAPI spec version: 1.0
    Contact: openapi@alor.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Trade(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'orderno': 'str',
        'symbol': 'str',
        'broker_symbol': 'str',
        'exchange': 'str',
        '_date': 'str',
        'board': 'str',
        'qty_units': 'int',
        'qty_batch': 'int',
        'qty': 'int',
        'price': 'float',
        'side': 'str',
        'existing': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'orderno': 'orderno',
        'symbol': 'symbol',
        'broker_symbol': 'brokerSymbol',
        'exchange': 'exchange',
        '_date': 'date',
        'board': 'board',
        'qty_units': 'qtyUnits',
        'qty_batch': 'qtyBatch',
        'qty': 'qty',
        'price': 'price',
        'side': 'side',
        'existing': 'existing'
    }

    def __init__(self, id=None, orderno=None, symbol=None, broker_symbol=None, exchange=None, _date=None, board=None, qty_units=None, qty_batch=None, qty=None, price=None, side=None, existing=None):  # noqa: E501
        """Trade - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._orderno = None
        self._symbol = None
        self._broker_symbol = None
        self._exchange = None
        self.__date = None
        self._board = None
        self._qty_units = None
        self._qty_batch = None
        self._qty = None
        self._price = None
        self._side = None
        self._existing = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if orderno is not None:
            self.orderno = orderno
        if symbol is not None:
            self.symbol = symbol
        if broker_symbol is not None:
            self.broker_symbol = broker_symbol
        if exchange is not None:
            self.exchange = exchange
        if _date is not None:
            self._date = _date
        if board is not None:
            self.board = board
        if qty_units is not None:
            self.qty_units = qty_units
        if qty_batch is not None:
            self.qty_batch = qty_batch
        if qty is not None:
            self.qty = qty
        if price is not None:
            self.price = price
        if side is not None:
            self.side = side
        if existing is not None:
            self.existing = existing

    @property
    def id(self):
        """Gets the id of this Trade.  # noqa: E501

        Уникальный идентификатор сделки  # noqa: E501

        :return: The id of this Trade.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Trade.

        Уникальный идентификатор сделки  # noqa: E501

        :param id: The id of this Trade.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def orderno(self):
        """Gets the orderno of this Trade.  # noqa: E501

        Идентификатор заявки  # noqa: E501

        :return: The orderno of this Trade.  # noqa: E501
        :rtype: str
        """
        return self._orderno

    @orderno.setter
    def orderno(self, orderno):
        """Sets the orderno of this Trade.

        Идентификатор заявки  # noqa: E501

        :param orderno: The orderno of this Trade.  # noqa: E501
        :type: str
        """

        self._orderno = orderno

    @property
    def symbol(self):
        """Gets the symbol of this Trade.  # noqa: E501

        Тикер (Код финансового инструмента). \"[N/A]\" используется если symbol не определен.  # noqa: E501

        :return: The symbol of this Trade.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this Trade.

        Тикер (Код финансового инструмента). \"[N/A]\" используется если symbol не определен.  # noqa: E501

        :param symbol: The symbol of this Trade.  # noqa: E501
        :type: str
        """

        self._symbol = symbol

    @property
    def broker_symbol(self):
        """Gets the broker_symbol of this Trade.  # noqa: E501

        Пара Биржа:Тикер  # noqa: E501

        :return: The broker_symbol of this Trade.  # noqa: E501
        :rtype: str
        """
        return self._broker_symbol

    @broker_symbol.setter
    def broker_symbol(self, broker_symbol):
        """Sets the broker_symbol of this Trade.

        Пара Биржа:Тикер  # noqa: E501

        :param broker_symbol: The broker_symbol of this Trade.  # noqa: E501
        :type: str
        """

        self._broker_symbol = broker_symbol

    @property
    def exchange(self):
        """Gets the exchange of this Trade.  # noqa: E501

        Биржа  # noqa: E501

        :return: The exchange of this Trade.  # noqa: E501
        :rtype: str
        """
        return self._exchange

    @exchange.setter
    def exchange(self, exchange):
        """Sets the exchange of this Trade.

        Биржа  # noqa: E501

        :param exchange: The exchange of this Trade.  # noqa: E501
        :type: str
        """

        self._exchange = exchange

    @property
    def _date(self):
        """Gets the _date of this Trade.  # noqa: E501

        Дата и время (UTC) закрытия заявки  # noqa: E501

        :return: The _date of this Trade.  # noqa: E501
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this Trade.

        Дата и время (UTC) закрытия заявки  # noqa: E501

        :param _date: The _date of this Trade.  # noqa: E501
        :type: str
        """

        self.__date = _date

    @property
    def board(self):
        """Gets the board of this Trade.  # noqa: E501

        Код режима торгов  # noqa: E501

        :return: The board of this Trade.  # noqa: E501
        :rtype: str
        """
        return self._board

    @board.setter
    def board(self, board):
        """Sets the board of this Trade.

        Код режима торгов  # noqa: E501

        :param board: The board of this Trade.  # noqa: E501
        :type: str
        """

        self._board = board

    @property
    def qty_units(self):
        """Gets the qty_units of this Trade.  # noqa: E501

        Количество (штуки)  # noqa: E501

        :return: The qty_units of this Trade.  # noqa: E501
        :rtype: int
        """
        return self._qty_units

    @qty_units.setter
    def qty_units(self, qty_units):
        """Sets the qty_units of this Trade.

        Количество (штуки)  # noqa: E501

        :param qty_units: The qty_units of this Trade.  # noqa: E501
        :type: int
        """

        self._qty_units = qty_units

    @property
    def qty_batch(self):
        """Gets the qty_batch of this Trade.  # noqa: E501

        Количество (лоты)  # noqa: E501

        :return: The qty_batch of this Trade.  # noqa: E501
        :rtype: int
        """
        return self._qty_batch

    @qty_batch.setter
    def qty_batch(self, qty_batch):
        """Sets the qty_batch of this Trade.

        Количество (лоты)  # noqa: E501

        :param qty_batch: The qty_batch of this Trade.  # noqa: E501
        :type: int
        """

        self._qty_batch = qty_batch

    @property
    def qty(self):
        """Gets the qty of this Trade.  # noqa: E501

        Количество (лоты)  # noqa: E501

        :return: The qty of this Trade.  # noqa: E501
        :rtype: int
        """
        return self._qty

    @qty.setter
    def qty(self, qty):
        """Sets the qty of this Trade.

        Количество (лоты)  # noqa: E501

        :param qty: The qty of this Trade.  # noqa: E501
        :type: int
        """

        self._qty = qty

    @property
    def price(self):
        """Gets the price of this Trade.  # noqa: E501

        Цена  # noqa: E501

        :return: The price of this Trade.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Trade.

        Цена  # noqa: E501

        :param price: The price of this Trade.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def side(self):
        """Gets the side of this Trade.  # noqa: E501

        Направление сделки. Купля либо продажа.  # noqa: E501

        :return: The side of this Trade.  # noqa: E501
        :rtype: str
        """
        return self._side

    @side.setter
    def side(self, side):
        """Sets the side of this Trade.

        Направление сделки. Купля либо продажа.  # noqa: E501

        :param side: The side of this Trade.  # noqa: E501
        :type: str
        """
        allowed_values = ["buy", "sell"]  # noqa: E501
        if side not in allowed_values:
            raise ValueError(
                "Invalid value for `side` ({0}), must be one of {1}"  # noqa: E501
                .format(side, allowed_values)
            )

        self._side = side

    @property
    def existing(self):
        """Gets the existing of this Trade.  # noqa: E501

        True - для данных из \"снепшота\", то есть из истории. False - для новых событий  # noqa: E501

        :return: The existing of this Trade.  # noqa: E501
        :rtype: bool
        """
        return self._existing

    @existing.setter
    def existing(self, existing):
        """Sets the existing of this Trade.

        True - для данных из \"снепшота\", то есть из истории. False - для новых событий  # noqa: E501

        :param existing: The existing of this Trade.  # noqa: E501
        :type: bool
        """

        self._existing = existing

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Trade, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Trade):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
