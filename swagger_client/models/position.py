# coding: utf-8

"""
    Alor OpenAPI V2

    <small>Swagger-документация для API v1 доступна по ссылке&#58; <a href=\"https://alor.dev/rawdocs/WarpOpenApi3.yml\">https://alor.dev/rawdocs/WarpOpenApi3.yml</a></small><br><br> API для работы с торговой системой АЛОР Брокер. Предоставляет интерфейсы для выставления заявок и получения биржевой информации.  Данные для неавторизованных запросов предоставляются с 15-минутной задержкой, для авторизованных - без задержек.   Публичная биржевая информация может быть получена через HTTP(S) API, а также доступна через однократно установленное WebSocket соединение. <br> **Внимание!** WebSocket соединения могут и будут разрываться *(например, если клиент не успевает обрабатывать сообщения и на стороне API в буфере накопится более 5000 событий)*. <br> Во внешнем ПО необходимо предусмотреть механизмы переподключения и переподписки (при необходимости)! <br> <br>  В OpenAPI V2 \"Санкт-Петербургская биржа\" (SPBX) еще находится в процессе разработки. Доступно получение рыночных данных *(marketdata, md)*. Заявки на SPBX в V2 пока недоступны. В V1 торговый функционал для SPBX доступен.  <h4> Доступные типы данных </h4>  * Все сделки  * Все заявки  * Информация по инструментам  * Котировки  * Биржевые стаканы  * Исторические данные  * Позиции  * Информация о клиенте  <h4>Поддерживаемые виды заявок</h4>  * рыночные  * лимитные  * стоп-лосс  * тейк-профит  * стоп-лосс лимит  * тейк-профит лимит  <h4>    Ограничения по частоте запросов     </h4> <p>На текущий момент ограничений по количеству запросов в минуту или WebSocket-подписок нет. <br/> Сервер может обрабатывать \"тяжелые\" запросы (пример - история за все время) и запросы без авторизации с меньшим приоритетом. <br/> АЛОР оставляет за собой право на ограничение частоты запросов, если это будет необходимо для стабильной работы системы. <br/> <br/></p>   <h2> Авторизация </h2>  <h4>OAuth</h4>  <b>Внимание!</b>   JWT и refresh token — равносильны логину и паролю. Их нужно скрывать от публичного доступа.  <h4>Для разработчиков сторонних приложений, в которых торговлю будут вести их пользователи.</h4>  Мы предоставляем сервис для авторизации сторониих приложений по стандарту OAuth 2.0. С примером приложения, использующего OAuth сервис для авторизации пользователей можно ознакомиться в разделе  <a href=\"/examples\">Примеры</a>.  Список разрешений (scopes), которые могут быть выданы приложению: <table>   <tr>     <td><b>OrdersRead</b></td>     <td>Чтение выставленных заявок</td>   </tr>   <tr>     <td><b>OrdersCreate</b></td>     <td>Выставление заявок</td>   </tr>   <tr>     <td><b>Trades</b></td>     <td>Чтение совершенных сделок</td>   </tr>   <tr>     <td><b>Personal</b></td>     <td>Персональная информация: ФИО, почта и т.п.</td>   </tr>   <tr>     <td><b>Stats</b></td>     <td>Статистика: прибыль, средние цены и т.п.</td>   </tr> </table>  <h4>Для ведения операций от своего имени</h4>  Выписать себе <b>refresh token</b> для ведения операций от своего имени [можно здесь](https://alor.dev/open-api-tokens).  <h2>Краткое описание работы с авторизацией</h2>  Чтобы выполнить авторизованный запрос, добавьте в запрос заголовок с именем \"Authorization\" и значением, состоящим из префикса `\"Bearer \"` и валидного JWT токена.  Срок жизни JWT короткий: это сделано для безопасности.  Для большинства вариантов использования API мы рекоммендуем использовать механизм  <b>refresh token</b> .  Механизм  <b>refresh token</b>  позволяет получать JWT с новым сроком жизни. Для этого отправьте POST запрос на адрес `https://oauthdev.alor.ru/refresh?token={refreshToken}` *(игровой контур)* или `https://oauth.alor.ru/refresh?token={refreshToken}` *(боевой контур)*. Если у  <b>refresh token</b>  не истек срок жизни и не он не был отозван, то в теле ответа в поле AccessToken вернётся свежий JWT токен.   Срок жизни  <b>refresh token</b>, получаемого обычным способом — 1 месяц.   Срок жизни  <b>refresh token</b>, получаемого самостоятельным выписыванием — год.  | |-  > Если мы для вас не завели портфели для ведения торговли в игровом контуре, оставьте заявку на <a href=\"mailto:openapi@alor.ru\">openapi@alor.ru</a> или свяжитесь с нами в [телеграме](https://tgmssg.ru/AlorOpenAPI).  </br></br> Игровой контур: `https://apidev.alor.ru`  Боевой контур: `https://api.alor.ru`   # noqa: E501

    OpenAPI spec version: 1.0
    Contact: openapi@alor.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Position(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'symbol': 'str',
        'broker_symbol': 'str',
        'exchange': 'str',
        'avg_price': 'float',
        'qty_units': 'float',
        'open_units': 'float',
        'lot_size': 'float',
        'short_name': 'str',
        'qty_t0': 'float',
        'qty_t1': 'float',
        'qty_t2': 'float',
        'qty_t_future': 'float',
        'qty_t0_batch': 'float',
        'qty_t1_batch': 'float',
        'qty_t2_batch': 'float',
        'qty_t_future_batch': 'float',
        'qty_batch': 'float',
        'open_qty_batch': 'float',
        'qty': 'float',
        'open': 'float',
        'unrealised_pl': 'float',
        'is_currency': 'bool'
    }

    attribute_map = {
        'symbol': 'symbol',
        'broker_symbol': 'brokerSymbol',
        'exchange': 'exchange',
        'avg_price': 'avgPrice',
        'qty_units': 'qtyUnits',
        'open_units': 'openUnits',
        'lot_size': 'lotSize',
        'short_name': 'shortName',
        'qty_t0': 'qtyT0',
        'qty_t1': 'qtyT1',
        'qty_t2': 'qtyT2',
        'qty_t_future': 'qtyTFuture',
        'qty_t0_batch': 'qtyT0Batch',
        'qty_t1_batch': 'qtyT1Batch',
        'qty_t2_batch': 'qtyT2Batch',
        'qty_t_future_batch': 'qtyTFutureBatch',
        'qty_batch': 'qtyBatch',
        'open_qty_batch': 'openQtyBatch',
        'qty': 'qty',
        'open': 'open',
        'unrealised_pl': 'unrealisedPl',
        'is_currency': 'isCurrency'
    }

    def __init__(self, symbol=None, broker_symbol=None, exchange=None, avg_price=None, qty_units=None, open_units=None, lot_size=None, short_name=None, qty_t0=None, qty_t1=None, qty_t2=None, qty_t_future=None, qty_t0_batch=None, qty_t1_batch=None, qty_t2_batch=None, qty_t_future_batch=None, qty_batch=None, open_qty_batch=None, qty=None, open=None, unrealised_pl=None, is_currency=None):  # noqa: E501
        """Position - a model defined in Swagger"""  # noqa: E501
        self._symbol = None
        self._broker_symbol = None
        self._exchange = None
        self._avg_price = None
        self._qty_units = None
        self._open_units = None
        self._lot_size = None
        self._short_name = None
        self._qty_t0 = None
        self._qty_t1 = None
        self._qty_t2 = None
        self._qty_t_future = None
        self._qty_t0_batch = None
        self._qty_t1_batch = None
        self._qty_t2_batch = None
        self._qty_t_future_batch = None
        self._qty_batch = None
        self._open_qty_batch = None
        self._qty = None
        self._open = None
        self._unrealised_pl = None
        self._is_currency = None
        self.discriminator = None
        if symbol is not None:
            self.symbol = symbol
        if broker_symbol is not None:
            self.broker_symbol = broker_symbol
        if exchange is not None:
            self.exchange = exchange
        if avg_price is not None:
            self.avg_price = avg_price
        if qty_units is not None:
            self.qty_units = qty_units
        if open_units is not None:
            self.open_units = open_units
        if lot_size is not None:
            self.lot_size = lot_size
        if short_name is not None:
            self.short_name = short_name
        if qty_t0 is not None:
            self.qty_t0 = qty_t0
        if qty_t1 is not None:
            self.qty_t1 = qty_t1
        if qty_t2 is not None:
            self.qty_t2 = qty_t2
        if qty_t_future is not None:
            self.qty_t_future = qty_t_future
        if qty_t0_batch is not None:
            self.qty_t0_batch = qty_t0_batch
        if qty_t1_batch is not None:
            self.qty_t1_batch = qty_t1_batch
        if qty_t2_batch is not None:
            self.qty_t2_batch = qty_t2_batch
        if qty_t_future_batch is not None:
            self.qty_t_future_batch = qty_t_future_batch
        if qty_batch is not None:
            self.qty_batch = qty_batch
        if open_qty_batch is not None:
            self.open_qty_batch = open_qty_batch
        if qty is not None:
            self.qty = qty
        if open is not None:
            self.open = open
        if unrealised_pl is not None:
            self.unrealised_pl = unrealised_pl
        if is_currency is not None:
            self.is_currency = is_currency

    @property
    def symbol(self):
        """Gets the symbol of this Position.  # noqa: E501

        Тикер (Код финансового инструмента)  # noqa: E501

        :return: The symbol of this Position.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this Position.

        Тикер (Код финансового инструмента)  # noqa: E501

        :param symbol: The symbol of this Position.  # noqa: E501
        :type: str
        """

        self._symbol = symbol

    @property
    def broker_symbol(self):
        """Gets the broker_symbol of this Position.  # noqa: E501

        Пара Биржа:Тикер  # noqa: E501

        :return: The broker_symbol of this Position.  # noqa: E501
        :rtype: str
        """
        return self._broker_symbol

    @broker_symbol.setter
    def broker_symbol(self, broker_symbol):
        """Sets the broker_symbol of this Position.

        Пара Биржа:Тикер  # noqa: E501

        :param broker_symbol: The broker_symbol of this Position.  # noqa: E501
        :type: str
        """

        self._broker_symbol = broker_symbol

    @property
    def exchange(self):
        """Gets the exchange of this Position.  # noqa: E501

        Биржа  # noqa: E501

        :return: The exchange of this Position.  # noqa: E501
        :rtype: str
        """
        return self._exchange

    @exchange.setter
    def exchange(self, exchange):
        """Sets the exchange of this Position.

        Биржа  # noqa: E501

        :param exchange: The exchange of this Position.  # noqa: E501
        :type: str
        """

        self._exchange = exchange

    @property
    def avg_price(self):
        """Gets the avg_price of this Position.  # noqa: E501

        Средняя цена  # noqa: E501

        :return: The avg_price of this Position.  # noqa: E501
        :rtype: float
        """
        return self._avg_price

    @avg_price.setter
    def avg_price(self, avg_price):
        """Sets the avg_price of this Position.

        Средняя цена  # noqa: E501

        :param avg_price: The avg_price of this Position.  # noqa: E501
        :type: float
        """

        self._avg_price = avg_price

    @property
    def qty_units(self):
        """Gets the qty_units of this Position.  # noqa: E501

        Количество (штуки)  # noqa: E501

        :return: The qty_units of this Position.  # noqa: E501
        :rtype: float
        """
        return self._qty_units

    @qty_units.setter
    def qty_units(self, qty_units):
        """Sets the qty_units of this Position.

        Количество (штуки)  # noqa: E501

        :param qty_units: The qty_units of this Position.  # noqa: E501
        :type: float
        """

        self._qty_units = qty_units

    @property
    def open_units(self):
        """Gets the open_units of this Position.  # noqa: E501

        Количество открытых позиций (штуки)  # noqa: E501

        :return: The open_units of this Position.  # noqa: E501
        :rtype: float
        """
        return self._open_units

    @open_units.setter
    def open_units(self, open_units):
        """Sets the open_units of this Position.

        Количество открытых позиций (штуки)  # noqa: E501

        :param open_units: The open_units of this Position.  # noqa: E501
        :type: float
        """

        self._open_units = open_units

    @property
    def lot_size(self):
        """Gets the lot_size of this Position.  # noqa: E501

        Размер лота  # noqa: E501

        :return: The lot_size of this Position.  # noqa: E501
        :rtype: float
        """
        return self._lot_size

    @lot_size.setter
    def lot_size(self, lot_size):
        """Sets the lot_size of this Position.

        Размер лота  # noqa: E501

        :param lot_size: The lot_size of this Position.  # noqa: E501
        :type: float
        """

        self._lot_size = lot_size

    @property
    def short_name(self):
        """Gets the short_name of this Position.  # noqa: E501

        Короткое наименование  # noqa: E501

        :return: The short_name of this Position.  # noqa: E501
        :rtype: str
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        """Sets the short_name of this Position.

        Короткое наименование  # noqa: E501

        :param short_name: The short_name of this Position.  # noqa: E501
        :type: str
        """

        self._short_name = short_name

    @property
    def qty_t0(self):
        """Gets the qty_t0 of this Position.  # noqa: E501


        :return: The qty_t0 of this Position.  # noqa: E501
        :rtype: float
        """
        return self._qty_t0

    @qty_t0.setter
    def qty_t0(self, qty_t0):
        """Sets the qty_t0 of this Position.


        :param qty_t0: The qty_t0 of this Position.  # noqa: E501
        :type: float
        """

        self._qty_t0 = qty_t0

    @property
    def qty_t1(self):
        """Gets the qty_t1 of this Position.  # noqa: E501


        :return: The qty_t1 of this Position.  # noqa: E501
        :rtype: float
        """
        return self._qty_t1

    @qty_t1.setter
    def qty_t1(self, qty_t1):
        """Sets the qty_t1 of this Position.


        :param qty_t1: The qty_t1 of this Position.  # noqa: E501
        :type: float
        """

        self._qty_t1 = qty_t1

    @property
    def qty_t2(self):
        """Gets the qty_t2 of this Position.  # noqa: E501


        :return: The qty_t2 of this Position.  # noqa: E501
        :rtype: float
        """
        return self._qty_t2

    @qty_t2.setter
    def qty_t2(self, qty_t2):
        """Sets the qty_t2 of this Position.


        :param qty_t2: The qty_t2 of this Position.  # noqa: E501
        :type: float
        """

        self._qty_t2 = qty_t2

    @property
    def qty_t_future(self):
        """Gets the qty_t_future of this Position.  # noqa: E501

        Количество (штуки)  # noqa: E501

        :return: The qty_t_future of this Position.  # noqa: E501
        :rtype: float
        """
        return self._qty_t_future

    @qty_t_future.setter
    def qty_t_future(self, qty_t_future):
        """Sets the qty_t_future of this Position.

        Количество (штуки)  # noqa: E501

        :param qty_t_future: The qty_t_future of this Position.  # noqa: E501
        :type: float
        """

        self._qty_t_future = qty_t_future

    @property
    def qty_t0_batch(self):
        """Gets the qty_t0_batch of this Position.  # noqa: E501


        :return: The qty_t0_batch of this Position.  # noqa: E501
        :rtype: float
        """
        return self._qty_t0_batch

    @qty_t0_batch.setter
    def qty_t0_batch(self, qty_t0_batch):
        """Sets the qty_t0_batch of this Position.


        :param qty_t0_batch: The qty_t0_batch of this Position.  # noqa: E501
        :type: float
        """

        self._qty_t0_batch = qty_t0_batch

    @property
    def qty_t1_batch(self):
        """Gets the qty_t1_batch of this Position.  # noqa: E501


        :return: The qty_t1_batch of this Position.  # noqa: E501
        :rtype: float
        """
        return self._qty_t1_batch

    @qty_t1_batch.setter
    def qty_t1_batch(self, qty_t1_batch):
        """Sets the qty_t1_batch of this Position.


        :param qty_t1_batch: The qty_t1_batch of this Position.  # noqa: E501
        :type: float
        """

        self._qty_t1_batch = qty_t1_batch

    @property
    def qty_t2_batch(self):
        """Gets the qty_t2_batch of this Position.  # noqa: E501


        :return: The qty_t2_batch of this Position.  # noqa: E501
        :rtype: float
        """
        return self._qty_t2_batch

    @qty_t2_batch.setter
    def qty_t2_batch(self, qty_t2_batch):
        """Sets the qty_t2_batch of this Position.


        :param qty_t2_batch: The qty_t2_batch of this Position.  # noqa: E501
        :type: float
        """

        self._qty_t2_batch = qty_t2_batch

    @property
    def qty_t_future_batch(self):
        """Gets the qty_t_future_batch of this Position.  # noqa: E501

        Количество (лоты)  # noqa: E501

        :return: The qty_t_future_batch of this Position.  # noqa: E501
        :rtype: float
        """
        return self._qty_t_future_batch

    @qty_t_future_batch.setter
    def qty_t_future_batch(self, qty_t_future_batch):
        """Sets the qty_t_future_batch of this Position.

        Количество (лоты)  # noqa: E501

        :param qty_t_future_batch: The qty_t_future_batch of this Position.  # noqa: E501
        :type: float
        """

        self._qty_t_future_batch = qty_t_future_batch

    @property
    def qty_batch(self):
        """Gets the qty_batch of this Position.  # noqa: E501

        Количество (лоты)  # noqa: E501

        :return: The qty_batch of this Position.  # noqa: E501
        :rtype: float
        """
        return self._qty_batch

    @qty_batch.setter
    def qty_batch(self, qty_batch):
        """Sets the qty_batch of this Position.

        Количество (лоты)  # noqa: E501

        :param qty_batch: The qty_batch of this Position.  # noqa: E501
        :type: float
        """

        self._qty_batch = qty_batch

    @property
    def open_qty_batch(self):
        """Gets the open_qty_batch of this Position.  # noqa: E501


        :return: The open_qty_batch of this Position.  # noqa: E501
        :rtype: float
        """
        return self._open_qty_batch

    @open_qty_batch.setter
    def open_qty_batch(self, open_qty_batch):
        """Sets the open_qty_batch of this Position.


        :param open_qty_batch: The open_qty_batch of this Position.  # noqa: E501
        :type: float
        """

        self._open_qty_batch = open_qty_batch

    @property
    def qty(self):
        """Gets the qty of this Position.  # noqa: E501

        Количество (лоты)  # noqa: E501

        :return: The qty of this Position.  # noqa: E501
        :rtype: float
        """
        return self._qty

    @qty.setter
    def qty(self, qty):
        """Sets the qty of this Position.

        Количество (лоты)  # noqa: E501

        :param qty: The qty of this Position.  # noqa: E501
        :type: float
        """

        self._qty = qty

    @property
    def open(self):
        """Gets the open of this Position.  # noqa: E501


        :return: The open of this Position.  # noqa: E501
        :rtype: float
        """
        return self._open

    @open.setter
    def open(self, open):
        """Sets the open of this Position.


        :param open: The open of this Position.  # noqa: E501
        :type: float
        """

        self._open = open

    @property
    def unrealised_pl(self):
        """Gets the unrealised_pl of this Position.  # noqa: E501


        :return: The unrealised_pl of this Position.  # noqa: E501
        :rtype: float
        """
        return self._unrealised_pl

    @unrealised_pl.setter
    def unrealised_pl(self, unrealised_pl):
        """Sets the unrealised_pl of this Position.


        :param unrealised_pl: The unrealised_pl of this Position.  # noqa: E501
        :type: float
        """

        self._unrealised_pl = unrealised_pl

    @property
    def is_currency(self):
        """Gets the is_currency of this Position.  # noqa: E501

        True для валютных остатков (денег), false - для торговых инструментов  # noqa: E501

        :return: The is_currency of this Position.  # noqa: E501
        :rtype: bool
        """
        return self._is_currency

    @is_currency.setter
    def is_currency(self, is_currency):
        """Sets the is_currency of this Position.

        True для валютных остатков (денег), false - для торговых инструментов  # noqa: E501

        :param is_currency: The is_currency of this Position.  # noqa: E501
        :type: bool
        """

        self._is_currency = is_currency

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Position, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Position):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
