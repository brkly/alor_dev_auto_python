# coding: utf-8

"""
    Alor OpenAPI V2

    <small>Swagger-документация для API v1 доступна по ссылке&#58; <a href=\"https://alor.dev/rawdocs/WarpOpenApi3.yml\">https://alor.dev/rawdocs/WarpOpenApi3.yml</a></small><br><br> API для работы с торговой системой АЛОР Брокер. Предоставляет интерфейсы для выставления заявок и получения биржевой информации.  Данные для неавторизованных запросов предоставляются с 15-минутной задержкой, для авторизованных - без задержек.   Публичная биржевая информация может быть получена через HTTP(S) API, а также доступна через однократно установленное WebSocket соединение. <br> **Внимание!** WebSocket соединения могут и будут разрываться *(например, если клиент не успевает обрабатывать сообщения и на стороне API в буфере накопится более 5000 событий)*. <br> Во внешнем ПО необходимо предусмотреть механизмы переподключения и переподписки (при необходимости)! <br> <br>  В OpenAPI V2 \"Санкт-Петербургская биржа\" (SPBX) еще находится в процессе разработки. Доступно получение рыночных данных *(marketdata, md)*. Заявки на SPBX в V2 пока недоступны. В V1 торговый функционал для SPBX доступен.  <h4> Доступные типы данных </h4>  * Все сделки  * Все заявки  * Информация по инструментам  * Котировки  * Биржевые стаканы  * Исторические данные  * Позиции  * Информация о клиенте  <h4>Поддерживаемые виды заявок</h4>  * рыночные  * лимитные  * стоп-лосс  * тейк-профит  * стоп-лосс лимит  * тейк-профит лимит  <h4>    Ограничения по частоте запросов     </h4> <p>На текущий момент ограничений по количеству запросов в минуту или WebSocket-подписок нет. <br/> Сервер может обрабатывать \"тяжелые\" запросы (пример - история за все время) и запросы без авторизации с меньшим приоритетом. <br/> АЛОР оставляет за собой право на ограничение частоты запросов, если это будет необходимо для стабильной работы системы. <br/> <br/></p>   <h2> Авторизация </h2>  <h4>OAuth</h4>  <b>Внимание!</b>   JWT и refresh token — равносильны логину и паролю. Их нужно скрывать от публичного доступа.  <h4>Для разработчиков сторонних приложений, в которых торговлю будут вести их пользователи.</h4>  Мы предоставляем сервис для авторизации сторониих приложений по стандарту OAuth 2.0. С примером приложения, использующего OAuth сервис для авторизации пользователей можно ознакомиться в разделе  <a href=\"/examples\">Примеры</a>.  Список разрешений (scopes), которые могут быть выданы приложению: <table>   <tr>     <td><b>OrdersRead</b></td>     <td>Чтение выставленных заявок</td>   </tr>   <tr>     <td><b>OrdersCreate</b></td>     <td>Выставление заявок</td>   </tr>   <tr>     <td><b>Trades</b></td>     <td>Чтение совершенных сделок</td>   </tr>   <tr>     <td><b>Personal</b></td>     <td>Персональная информация: ФИО, почта и т.п.</td>   </tr>   <tr>     <td><b>Stats</b></td>     <td>Статистика: прибыль, средние цены и т.п.</td>   </tr> </table>  <h4>Для ведения операций от своего имени</h4>  Выписать себе <b>refresh token</b> для ведения операций от своего имени [можно здесь](https://alor.dev/open-api-tokens).  <h2>Краткое описание работы с авторизацией</h2>  Чтобы выполнить авторизованный запрос, добавьте в запрос заголовок с именем \"Authorization\" и значением, состоящим из префикса `\"Bearer \"` и валидного JWT токена.  Срок жизни JWT короткий: это сделано для безопасности.  Для большинства вариантов использования API мы рекоммендуем использовать механизм  <b>refresh token</b> .  Механизм  <b>refresh token</b>  позволяет получать JWT с новым сроком жизни. Для этого отправьте POST запрос на адрес `https://oauthdev.alor.ru/refresh?token={refreshToken}` *(игровой контур)* или `https://oauth.alor.ru/refresh?token={refreshToken}` *(боевой контур)*. Если у  <b>refresh token</b>  не истек срок жизни и не он не был отозван, то в теле ответа в поле AccessToken вернётся свежий JWT токен.   Срок жизни  <b>refresh token</b>, получаемого обычным способом — 1 месяц.   Срок жизни  <b>refresh token</b>, получаемого самостоятельным выписыванием — год.  | |-  > Если мы для вас не завели портфели для ведения торговли в игровом контуре, оставьте заявку на <a href=\"mailto:openapi@alor.ru\">openapi@alor.ru</a> или свяжитесь с нами в [телеграме](https://tgmssg.ru/AlorOpenAPI).  </br></br> Игровой контур: `https://apidev.alor.ru`  Боевой контур: `https://api.alor.ru`   # noqa: E501

    OpenAPI spec version: 1.0
    Contact: openapi@alor.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DefaultApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def command_api_v2clientordersactionslimit(self, body, x_alor_reqid, **kwargs):  # noqa: E501
        """Создание лимитной заявки  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.command_api_v2clientordersactionslimit(body, x_alor_reqid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BodyrequestOrdersActionsLimitTV body: Тело заявки (required)
        :param str x_alor_reqid: Через точку с запятой портфель и уникальный идентификатор запроса ``portfolio;uid``. В качестве идентификатора запроса требуется уникальная случайная строка. Если уже приходил запрос с таким идентификатором, то заявка не будет исполнена повторно, а в качестве ответа будет возвращена копия ответа на предыдущий запрос с таким значением идентификатора. (required)
        :return: OrdersActionsLimitMarketCommandAPI
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.command_api_v2clientordersactionslimit_with_http_info(body, x_alor_reqid, **kwargs)  # noqa: E501
        else:
            (data) = self.command_api_v2clientordersactionslimit_with_http_info(body, x_alor_reqid, **kwargs)  # noqa: E501
            return data

    def command_api_v2clientordersactionslimit_with_http_info(self, body, x_alor_reqid, **kwargs):  # noqa: E501
        """Создание лимитной заявки  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.command_api_v2clientordersactionslimit_with_http_info(body, x_alor_reqid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BodyrequestOrdersActionsLimitTV body: Тело заявки (required)
        :param str x_alor_reqid: Через точку с запятой портфель и уникальный идентификатор запроса ``portfolio;uid``. В качестве идентификатора запроса требуется уникальная случайная строка. Если уже приходил запрос с таким идентификатором, то заявка не будет исполнена повторно, а в качестве ответа будет возвращена копия ответа на предыдущий запрос с таким значением идентификатора. (required)
        :return: OrdersActionsLimitMarketCommandAPI
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_alor_reqid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method command_api_v2clientordersactionslimit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `command_api_v2clientordersactionslimit`")  # noqa: E501
        # verify the required parameter 'x_alor_reqid' is set
        if ('x_alor_reqid' not in params or
                params['x_alor_reqid'] is None):
            raise ValueError("Missing the required parameter `x_alor_reqid` when calling `command_api_v2clientordersactionslimit`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_alor_reqid' in params:
            header_params['X-ALOR-REQID'] = params['x_alor_reqid']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/commandapi/warptrans/TRADE/v2/client/orders/actions/limit', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrdersActionsLimitMarketCommandAPI',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def command_api_v2clientordersactionslimitput(self, body, x_alor_reqid, order_id, **kwargs):  # noqa: E501
        """Изменение лимитной заявки  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.command_api_v2clientordersactionslimitput(body, x_alor_reqid, order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BodyrequestOrdersActionsLimitTVput body: Тело заявки (required)
        :param str x_alor_reqid: Через точку с запятой портфолио и уникальный идентификатор запроса ``portfolio;uid``. В качестве идентификатора запроса требуется уникальная случайная строка из цифр. Если уже приходил запрос с таким идентификатором, то заявка не будет исполнена повторно, а в качестве ответа будет возвращена копия ответа на первый запрос с таким значением идентификатора (required)
        :param str order_id: Идентификатор заявки (required)
        :return: OrdersActionsLimitMarket
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.command_api_v2clientordersactionslimitput_with_http_info(body, x_alor_reqid, order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.command_api_v2clientordersactionslimitput_with_http_info(body, x_alor_reqid, order_id, **kwargs)  # noqa: E501
            return data

    def command_api_v2clientordersactionslimitput_with_http_info(self, body, x_alor_reqid, order_id, **kwargs):  # noqa: E501
        """Изменение лимитной заявки  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.command_api_v2clientordersactionslimitput_with_http_info(body, x_alor_reqid, order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BodyrequestOrdersActionsLimitTVput body: Тело заявки (required)
        :param str x_alor_reqid: Через точку с запятой портфолио и уникальный идентификатор запроса ``portfolio;uid``. В качестве идентификатора запроса требуется уникальная случайная строка из цифр. Если уже приходил запрос с таким идентификатором, то заявка не будет исполнена повторно, а в качестве ответа будет возвращена копия ответа на первый запрос с таким значением идентификатора (required)
        :param str order_id: Идентификатор заявки (required)
        :return: OrdersActionsLimitMarket
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_alor_reqid', 'order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method command_api_v2clientordersactionslimitput" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `command_api_v2clientordersactionslimitput`")  # noqa: E501
        # verify the required parameter 'x_alor_reqid' is set
        if ('x_alor_reqid' not in params or
                params['x_alor_reqid'] is None):
            raise ValueError("Missing the required parameter `x_alor_reqid` when calling `command_api_v2clientordersactionslimitput`")  # noqa: E501
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `command_api_v2clientordersactionslimitput`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'order_id' in params:
            path_params['orderId'] = params['order_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_alor_reqid' in params:
            header_params['X-ALOR-REQID'] = params['x_alor_reqid']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/commandapi/warptrans/TRADE/v2/client/orders/actions/limit/{orderId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrdersActionsLimitMarket',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def command_api_v2clientordersactionsmarket(self, body, x_alor_reqid, **kwargs):  # noqa: E501
        """Создание рыночной заявки  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.command_api_v2clientordersactionsmarket(body, x_alor_reqid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BodyrequestOrdersActionsMarketTV body: Тело заявки (required)
        :param str x_alor_reqid: Через точку с запятой портфель и уникальный идентификатор запроса ``portfolio;uid``. В качестве идентификатора запроса требуется уникальная случайная строка. Если уже приходил запрос с таким идентификатором, то заявка не будет исполнена повторно, а в качестве ответа будет возвращена копия ответа на предыдущий запрос с таким значением идентификатора. (required)
        :return: OrdersActionsLimitMarketCommandAPI
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.command_api_v2clientordersactionsmarket_with_http_info(body, x_alor_reqid, **kwargs)  # noqa: E501
        else:
            (data) = self.command_api_v2clientordersactionsmarket_with_http_info(body, x_alor_reqid, **kwargs)  # noqa: E501
            return data

    def command_api_v2clientordersactionsmarket_with_http_info(self, body, x_alor_reqid, **kwargs):  # noqa: E501
        """Создание рыночной заявки  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.command_api_v2clientordersactionsmarket_with_http_info(body, x_alor_reqid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BodyrequestOrdersActionsMarketTV body: Тело заявки (required)
        :param str x_alor_reqid: Через точку с запятой портфель и уникальный идентификатор запроса ``portfolio;uid``. В качестве идентификатора запроса требуется уникальная случайная строка. Если уже приходил запрос с таким идентификатором, то заявка не будет исполнена повторно, а в качестве ответа будет возвращена копия ответа на предыдущий запрос с таким значением идентификатора. (required)
        :return: OrdersActionsLimitMarketCommandAPI
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_alor_reqid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method command_api_v2clientordersactionsmarket" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `command_api_v2clientordersactionsmarket`")  # noqa: E501
        # verify the required parameter 'x_alor_reqid' is set
        if ('x_alor_reqid' not in params or
                params['x_alor_reqid'] is None):
            raise ValueError("Missing the required parameter `x_alor_reqid` when calling `command_api_v2clientordersactionsmarket`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_alor_reqid' in params:
            header_params['X-ALOR-REQID'] = params['x_alor_reqid']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/commandapi/warptrans/TRADE/v2/client/orders/actions/market', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrdersActionsLimitMarketCommandAPI',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def command_api_v2clientordersactionsmarketput(self, body, x_alor_reqid, order_id, **kwargs):  # noqa: E501
        """Изменение рыночной заявки  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.command_api_v2clientordersactionsmarketput(body, x_alor_reqid, order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BodyrequestOrdersActionsMarketTVput body: Тело заявки (required)
        :param str x_alor_reqid: Через точку с запятой портфолио и уникальный идентификатор запроса ``portfolio;uid``. В качестве идентификатора запроса требуется уникальная случайная строка из цифр. Если уже приходил запрос с таким идентификатором, то заявка не будет исполнена повторно, а в качестве ответа будет возвращена копия ответа на первый запрос с таким значением идентификатора (required)
        :param str order_id: Идентификатор заявки (required)
        :return: OrdersActionsLimitMarket
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.command_api_v2clientordersactionsmarketput_with_http_info(body, x_alor_reqid, order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.command_api_v2clientordersactionsmarketput_with_http_info(body, x_alor_reqid, order_id, **kwargs)  # noqa: E501
            return data

    def command_api_v2clientordersactionsmarketput_with_http_info(self, body, x_alor_reqid, order_id, **kwargs):  # noqa: E501
        """Изменение рыночной заявки  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.command_api_v2clientordersactionsmarketput_with_http_info(body, x_alor_reqid, order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BodyrequestOrdersActionsMarketTVput body: Тело заявки (required)
        :param str x_alor_reqid: Через точку с запятой портфолио и уникальный идентификатор запроса ``portfolio;uid``. В качестве идентификатора запроса требуется уникальная случайная строка из цифр. Если уже приходил запрос с таким идентификатором, то заявка не будет исполнена повторно, а в качестве ответа будет возвращена копия ответа на первый запрос с таким значением идентификатора (required)
        :param str order_id: Идентификатор заявки (required)
        :return: OrdersActionsLimitMarket
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_alor_reqid', 'order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method command_api_v2clientordersactionsmarketput" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `command_api_v2clientordersactionsmarketput`")  # noqa: E501
        # verify the required parameter 'x_alor_reqid' is set
        if ('x_alor_reqid' not in params or
                params['x_alor_reqid'] is None):
            raise ValueError("Missing the required parameter `x_alor_reqid` when calling `command_api_v2clientordersactionsmarketput`")  # noqa: E501
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `command_api_v2clientordersactionsmarketput`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'order_id' in params:
            path_params['orderId'] = params['order_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_alor_reqid' in params:
            header_params['X-ALOR-REQID'] = params['x_alor_reqid']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/commandapi/warptrans/TRADE/v2/client/orders/actions/market/{orderId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrdersActionsLimitMarket',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def command_api_v2clientordersdelete(self, order_id, account, portfolio, exchange, stop, format, **kwargs):  # noqa: E501
        """Снятие заявки  # noqa: E501

        Снятие заявки с указанным идентификатором  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.command_api_v2clientordersdelete(order_id, account, portfolio, exchange, stop, format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str order_id: Идентификатор заявки (required)
        :param str account: Идентификатор аккаунта пользователя (required)
        :param str portfolio: Идентификатор клиентского портфеля (required)
        :param str exchange: Биржа (required)
        :param str stop: Является стоп-заявкой? (required)
        :param str format: Формат возвращаемого сервером JSON (required)
        :return: OrdersActionsDeleteOrderIdCommandAPI
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.command_api_v2clientordersdelete_with_http_info(order_id, account, portfolio, exchange, stop, format, **kwargs)  # noqa: E501
        else:
            (data) = self.command_api_v2clientordersdelete_with_http_info(order_id, account, portfolio, exchange, stop, format, **kwargs)  # noqa: E501
            return data

    def command_api_v2clientordersdelete_with_http_info(self, order_id, account, portfolio, exchange, stop, format, **kwargs):  # noqa: E501
        """Снятие заявки  # noqa: E501

        Снятие заявки с указанным идентификатором  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.command_api_v2clientordersdelete_with_http_info(order_id, account, portfolio, exchange, stop, format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str order_id: Идентификатор заявки (required)
        :param str account: Идентификатор аккаунта пользователя (required)
        :param str portfolio: Идентификатор клиентского портфеля (required)
        :param str exchange: Биржа (required)
        :param str stop: Является стоп-заявкой? (required)
        :param str format: Формат возвращаемого сервером JSON (required)
        :return: OrdersActionsDeleteOrderIdCommandAPI
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_id', 'account', 'portfolio', 'exchange', 'stop', 'format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method command_api_v2clientordersdelete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `command_api_v2clientordersdelete`")  # noqa: E501
        # verify the required parameter 'account' is set
        if ('account' not in params or
                params['account'] is None):
            raise ValueError("Missing the required parameter `account` when calling `command_api_v2clientordersdelete`")  # noqa: E501
        # verify the required parameter 'portfolio' is set
        if ('portfolio' not in params or
                params['portfolio'] is None):
            raise ValueError("Missing the required parameter `portfolio` when calling `command_api_v2clientordersdelete`")  # noqa: E501
        # verify the required parameter 'exchange' is set
        if ('exchange' not in params or
                params['exchange'] is None):
            raise ValueError("Missing the required parameter `exchange` when calling `command_api_v2clientordersdelete`")  # noqa: E501
        # verify the required parameter 'stop' is set
        if ('stop' not in params or
                params['stop'] is None):
            raise ValueError("Missing the required parameter `stop` when calling `command_api_v2clientordersdelete`")  # noqa: E501
        # verify the required parameter 'format' is set
        if ('format' not in params or
                params['format'] is None):
            raise ValueError("Missing the required parameter `format` when calling `command_api_v2clientordersdelete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'order_id' in params:
            path_params['orderId'] = params['order_id']  # noqa: E501

        query_params = []
        if 'account' in params:
            query_params.append(('account', params['account']))  # noqa: E501
        if 'portfolio' in params:
            query_params.append(('portfolio', params['portfolio']))  # noqa: E501
        if 'exchange' in params:
            query_params.append(('exchange', params['exchange']))  # noqa: E501
        if 'stop' in params:
            query_params.append(('stop', params['stop']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/commandapi/warptrans/TRADE/v2/client/orders/{orderId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrdersActionsDeleteOrderIdCommandAPI',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dev_get_all_orders(self, exchange, portfolio, **kwargs):  # noqa: E501
        """Получение информации о всех заявках  # noqa: E501

        Запрос информации о всех заявках  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dev_get_all_orders(exchange, portfolio, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str exchange: Биржа (required)
        :param str portfolio: Идентификатор клиентского портфеля (required)
        :param str format: Формат возвращаемого сервером JSON
        :return: Orders
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dev_get_all_orders_with_http_info(exchange, portfolio, **kwargs)  # noqa: E501
        else:
            (data) = self.dev_get_all_orders_with_http_info(exchange, portfolio, **kwargs)  # noqa: E501
            return data

    def dev_get_all_orders_with_http_info(self, exchange, portfolio, **kwargs):  # noqa: E501
        """Получение информации о всех заявках  # noqa: E501

        Запрос информации о всех заявках  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dev_get_all_orders_with_http_info(exchange, portfolio, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str exchange: Биржа (required)
        :param str portfolio: Идентификатор клиентского портфеля (required)
        :param str format: Формат возвращаемого сервером JSON
        :return: Orders
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exchange', 'portfolio', 'format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dev_get_all_orders" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exchange' is set
        if ('exchange' not in params or
                params['exchange'] is None):
            raise ValueError("Missing the required parameter `exchange` when calling `dev_get_all_orders`")  # noqa: E501
        # verify the required parameter 'portfolio' is set
        if ('portfolio' not in params or
                params['portfolio'] is None):
            raise ValueError("Missing the required parameter `portfolio` when calling `dev_get_all_orders`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exchange' in params:
            path_params['exchange'] = params['exchange']  # noqa: E501
        if 'portfolio' in params:
            path_params['portfolio'] = params['portfolio']  # noqa: E501

        query_params = []
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/md/v2/clients/{exchange}/{portfolio}/orders', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Orders',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dev_get_all_positions(self, exchange, portfolio, **kwargs):  # noqa: E501
        """Получение информации о позициях  # noqa: E501

        Запрос информации о позициях  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dev_get_all_positions(exchange, portfolio, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str exchange: Биржа (required)
        :param str portfolio: Идентификатор клиентского портфеля (required)
        :param str format: Формат возвращаемого сервером JSON
        :param bool without_currency: Исключить из ответа все денежные инструменты, по умолчанию false
        :return: Positions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dev_get_all_positions_with_http_info(exchange, portfolio, **kwargs)  # noqa: E501
        else:
            (data) = self.dev_get_all_positions_with_http_info(exchange, portfolio, **kwargs)  # noqa: E501
            return data

    def dev_get_all_positions_with_http_info(self, exchange, portfolio, **kwargs):  # noqa: E501
        """Получение информации о позициях  # noqa: E501

        Запрос информации о позициях  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dev_get_all_positions_with_http_info(exchange, portfolio, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str exchange: Биржа (required)
        :param str portfolio: Идентификатор клиентского портфеля (required)
        :param str format: Формат возвращаемого сервером JSON
        :param bool without_currency: Исключить из ответа все денежные инструменты, по умолчанию false
        :return: Positions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exchange', 'portfolio', 'format', 'without_currency']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dev_get_all_positions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exchange' is set
        if ('exchange' not in params or
                params['exchange'] is None):
            raise ValueError("Missing the required parameter `exchange` when calling `dev_get_all_positions`")  # noqa: E501
        # verify the required parameter 'portfolio' is set
        if ('portfolio' not in params or
                params['portfolio'] is None):
            raise ValueError("Missing the required parameter `portfolio` when calling `dev_get_all_positions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exchange' in params:
            path_params['exchange'] = params['exchange']  # noqa: E501
        if 'portfolio' in params:
            path_params['portfolio'] = params['portfolio']  # noqa: E501

        query_params = []
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501
        if 'without_currency' in params:
            query_params.append(('withoutCurrency', params['without_currency']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/md/v2/Clients/{exchange}/{portfolio}/positions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Positions',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dev_get_all_stop_orders(self, exchange, portfolio, **kwargs):  # noqa: E501
        """Получение информации о стоп-заявках  # noqa: E501

        Запрос информации о всех стоп-заявках  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dev_get_all_stop_orders(exchange, portfolio, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str exchange: Биржа (required)
        :param str portfolio: Идентификатор клиентского портфеля (required)
        :param str format: Формат возвращаемого сервером JSON
        :return: Stoporders
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dev_get_all_stop_orders_with_http_info(exchange, portfolio, **kwargs)  # noqa: E501
        else:
            (data) = self.dev_get_all_stop_orders_with_http_info(exchange, portfolio, **kwargs)  # noqa: E501
            return data

    def dev_get_all_stop_orders_with_http_info(self, exchange, portfolio, **kwargs):  # noqa: E501
        """Получение информации о стоп-заявках  # noqa: E501

        Запрос информации о всех стоп-заявках  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dev_get_all_stop_orders_with_http_info(exchange, portfolio, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str exchange: Биржа (required)
        :param str portfolio: Идентификатор клиентского портфеля (required)
        :param str format: Формат возвращаемого сервером JSON
        :return: Stoporders
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exchange', 'portfolio', 'format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dev_get_all_stop_orders" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exchange' is set
        if ('exchange' not in params or
                params['exchange'] is None):
            raise ValueError("Missing the required parameter `exchange` when calling `dev_get_all_stop_orders`")  # noqa: E501
        # verify the required parameter 'portfolio' is set
        if ('portfolio' not in params or
                params['portfolio'] is None):
            raise ValueError("Missing the required parameter `portfolio` when calling `dev_get_all_stop_orders`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exchange' in params:
            path_params['exchange'] = params['exchange']  # noqa: E501
        if 'portfolio' in params:
            path_params['portfolio'] = params['portfolio']  # noqa: E501

        query_params = []
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/md/v2/clients/{exchange}/{portfolio}/stoporders', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Stoporders',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dev_get_all_trades(self, exchange, portfolio, **kwargs):  # noqa: E501
        """Получение информации о сделках  # noqa: E501

        Запрос информации о сделках  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dev_get_all_trades(exchange, portfolio, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str exchange: Биржа (required)
        :param str portfolio: Идентификатор клиентского портфеля (required)
        :param str format: Формат возвращаемого сервером JSON
        :return: Trades
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dev_get_all_trades_with_http_info(exchange, portfolio, **kwargs)  # noqa: E501
        else:
            (data) = self.dev_get_all_trades_with_http_info(exchange, portfolio, **kwargs)  # noqa: E501
            return data

    def dev_get_all_trades_with_http_info(self, exchange, portfolio, **kwargs):  # noqa: E501
        """Получение информации о сделках  # noqa: E501

        Запрос информации о сделках  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dev_get_all_trades_with_http_info(exchange, portfolio, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str exchange: Биржа (required)
        :param str portfolio: Идентификатор клиентского портфеля (required)
        :param str format: Формат возвращаемого сервером JSON
        :return: Trades
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exchange', 'portfolio', 'format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dev_get_all_trades" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exchange' is set
        if ('exchange' not in params or
                params['exchange'] is None):
            raise ValueError("Missing the required parameter `exchange` when calling `dev_get_all_trades`")  # noqa: E501
        # verify the required parameter 'portfolio' is set
        if ('portfolio' not in params or
                params['portfolio'] is None):
            raise ValueError("Missing the required parameter `portfolio` when calling `dev_get_all_trades`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exchange' in params:
            path_params['exchange'] = params['exchange']  # noqa: E501
        if 'portfolio' in params:
            path_params['portfolio'] = params['portfolio']  # noqa: E501

        query_params = []
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/md/v2/Clients/{exchange}/{portfolio}/trades', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Trades',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dev_get_one_order(self, exchange, portfolio, order_id, **kwargs):  # noqa: E501
        """Получение информации о выбранной заявке  # noqa: E501

        Запрос информации о выбранной заявке  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dev_get_one_order(exchange, portfolio, order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str exchange: Биржа (required)
        :param str portfolio: Идентификатор клиентского портфеля (required)
        :param int order_id: Идентификатор заявки (required)
        :param str format: Формат возвращаемого сервером JSON
        :return: Order
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dev_get_one_order_with_http_info(exchange, portfolio, order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.dev_get_one_order_with_http_info(exchange, portfolio, order_id, **kwargs)  # noqa: E501
            return data

    def dev_get_one_order_with_http_info(self, exchange, portfolio, order_id, **kwargs):  # noqa: E501
        """Получение информации о выбранной заявке  # noqa: E501

        Запрос информации о выбранной заявке  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dev_get_one_order_with_http_info(exchange, portfolio, order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str exchange: Биржа (required)
        :param str portfolio: Идентификатор клиентского портфеля (required)
        :param int order_id: Идентификатор заявки (required)
        :param str format: Формат возвращаемого сервером JSON
        :return: Order
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exchange', 'portfolio', 'order_id', 'format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dev_get_one_order" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exchange' is set
        if ('exchange' not in params or
                params['exchange'] is None):
            raise ValueError("Missing the required parameter `exchange` when calling `dev_get_one_order`")  # noqa: E501
        # verify the required parameter 'portfolio' is set
        if ('portfolio' not in params or
                params['portfolio'] is None):
            raise ValueError("Missing the required parameter `portfolio` when calling `dev_get_one_order`")  # noqa: E501
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `dev_get_one_order`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exchange' in params:
            path_params['exchange'] = params['exchange']  # noqa: E501
        if 'portfolio' in params:
            path_params['portfolio'] = params['portfolio']  # noqa: E501
        if 'order_id' in params:
            path_params['orderId'] = params['order_id']  # noqa: E501

        query_params = []
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/md/v2/clients/{exchange}/{portfolio}/orders/{orderId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Order',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dev_get_one_position(self, exchange, portfolio, symbol, **kwargs):  # noqa: E501
        """Получение информации о позициях выбранного инструмента  # noqa: E501

        Запрос информации о позициях выбранного инструмента  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dev_get_one_position(exchange, portfolio, symbol, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str exchange: Биржа (required)
        :param str portfolio: Идентификатор клиентского портфеля (required)
        :param str symbol: Тикер (Код финансового инструмента) (required)
        :param str format: Формат возвращаемого сервером JSON
        :return: Position
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dev_get_one_position_with_http_info(exchange, portfolio, symbol, **kwargs)  # noqa: E501
        else:
            (data) = self.dev_get_one_position_with_http_info(exchange, portfolio, symbol, **kwargs)  # noqa: E501
            return data

    def dev_get_one_position_with_http_info(self, exchange, portfolio, symbol, **kwargs):  # noqa: E501
        """Получение информации о позициях выбранного инструмента  # noqa: E501

        Запрос информации о позициях выбранного инструмента  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dev_get_one_position_with_http_info(exchange, portfolio, symbol, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str exchange: Биржа (required)
        :param str portfolio: Идентификатор клиентского портфеля (required)
        :param str symbol: Тикер (Код финансового инструмента) (required)
        :param str format: Формат возвращаемого сервером JSON
        :return: Position
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exchange', 'portfolio', 'symbol', 'format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dev_get_one_position" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exchange' is set
        if ('exchange' not in params or
                params['exchange'] is None):
            raise ValueError("Missing the required parameter `exchange` when calling `dev_get_one_position`")  # noqa: E501
        # verify the required parameter 'portfolio' is set
        if ('portfolio' not in params or
                params['portfolio'] is None):
            raise ValueError("Missing the required parameter `portfolio` when calling `dev_get_one_position`")  # noqa: E501
        # verify the required parameter 'symbol' is set
        if ('symbol' not in params or
                params['symbol'] is None):
            raise ValueError("Missing the required parameter `symbol` when calling `dev_get_one_position`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exchange' in params:
            path_params['exchange'] = params['exchange']  # noqa: E501
        if 'portfolio' in params:
            path_params['portfolio'] = params['portfolio']  # noqa: E501
        if 'symbol' in params:
            path_params['symbol'] = params['symbol']  # noqa: E501

        query_params = []
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/md/v2/Clients/{exchange}/{portfolio}/positions/{symbol}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Position',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dev_get_one_stop_order(self, exchange, portfolio, order_id, **kwargs):  # noqa: E501
        """Получение информации о выбранной стоп-заявке  # noqa: E501

        Запрос информации о выбранной стоп-заявке  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dev_get_one_stop_order(exchange, portfolio, order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str exchange: Биржа (required)
        :param str portfolio: Идентификатор клиентского портфеля (required)
        :param int order_id: Идентификатор стоп-заявки (required)
        :param str format: Формат возвращаемого сервером JSON
        :return: Stoporder
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dev_get_one_stop_order_with_http_info(exchange, portfolio, order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.dev_get_one_stop_order_with_http_info(exchange, portfolio, order_id, **kwargs)  # noqa: E501
            return data

    def dev_get_one_stop_order_with_http_info(self, exchange, portfolio, order_id, **kwargs):  # noqa: E501
        """Получение информации о выбранной стоп-заявке  # noqa: E501

        Запрос информации о выбранной стоп-заявке  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dev_get_one_stop_order_with_http_info(exchange, portfolio, order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str exchange: Биржа (required)
        :param str portfolio: Идентификатор клиентского портфеля (required)
        :param int order_id: Идентификатор стоп-заявки (required)
        :param str format: Формат возвращаемого сервером JSON
        :return: Stoporder
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exchange', 'portfolio', 'order_id', 'format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dev_get_one_stop_order" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exchange' is set
        if ('exchange' not in params or
                params['exchange'] is None):
            raise ValueError("Missing the required parameter `exchange` when calling `dev_get_one_stop_order`")  # noqa: E501
        # verify the required parameter 'portfolio' is set
        if ('portfolio' not in params or
                params['portfolio'] is None):
            raise ValueError("Missing the required parameter `portfolio` when calling `dev_get_one_stop_order`")  # noqa: E501
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `dev_get_one_stop_order`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exchange' in params:
            path_params['exchange'] = params['exchange']  # noqa: E501
        if 'portfolio' in params:
            path_params['portfolio'] = params['portfolio']  # noqa: E501
        if 'order_id' in params:
            path_params['orderId'] = params['order_id']  # noqa: E501

        query_params = []
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/md/v2/clients/{exchange}/{portfolio}/stoporders/{orderId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Stoporder',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dev_get_ticker_trades(self, exchange, portfolio, ticker, **kwargs):  # noqa: E501
        """Получение информации о сделках по выбранному инструменту  # noqa: E501

        Запрос информации о сделках по выбранному инструменту  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dev_get_ticker_trades(exchange, portfolio, ticker, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str exchange: Биржа (required)
        :param str portfolio: Идентификатор клиентского портфеля (required)
        :param str ticker: Тикер (Код финансового инструмента) (required)
        :param str format: Формат возвращаемого сервером JSON
        :return: Trades
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dev_get_ticker_trades_with_http_info(exchange, portfolio, ticker, **kwargs)  # noqa: E501
        else:
            (data) = self.dev_get_ticker_trades_with_http_info(exchange, portfolio, ticker, **kwargs)  # noqa: E501
            return data

    def dev_get_ticker_trades_with_http_info(self, exchange, portfolio, ticker, **kwargs):  # noqa: E501
        """Получение информации о сделках по выбранному инструменту  # noqa: E501

        Запрос информации о сделках по выбранному инструменту  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dev_get_ticker_trades_with_http_info(exchange, portfolio, ticker, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str exchange: Биржа (required)
        :param str portfolio: Идентификатор клиентского портфеля (required)
        :param str ticker: Тикер (Код финансового инструмента) (required)
        :param str format: Формат возвращаемого сервером JSON
        :return: Trades
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exchange', 'portfolio', 'ticker', 'format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dev_get_ticker_trades" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exchange' is set
        if ('exchange' not in params or
                params['exchange'] is None):
            raise ValueError("Missing the required parameter `exchange` when calling `dev_get_ticker_trades`")  # noqa: E501
        # verify the required parameter 'portfolio' is set
        if ('portfolio' not in params or
                params['portfolio'] is None):
            raise ValueError("Missing the required parameter `portfolio` when calling `dev_get_ticker_trades`")  # noqa: E501
        # verify the required parameter 'ticker' is set
        if ('ticker' not in params or
                params['ticker'] is None):
            raise ValueError("Missing the required parameter `ticker` when calling `dev_get_ticker_trades`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exchange' in params:
            path_params['exchange'] = params['exchange']  # noqa: E501
        if 'portfolio' in params:
            path_params['portfolio'] = params['portfolio']  # noqa: E501
        if 'ticker' in params:
            path_params['ticker'] = params['ticker']  # noqa: E501

        query_params = []
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/md/v2/Clients/{exchange}/{portfolio}/{ticker}/trades', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Trades',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dev_history(self, symbol, exchange, tf, _from, to, **kwargs):  # noqa: E501
        """Запрос истории для выбранных биржи и инструмента  # noqa: E501

        Запрос истории рынка для выбранных биржи и финансового инструмента. Данные имеют задержку в 15 минут, если запрос не авторизован. Для авторизованных клиентов задержка не применяется.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dev_history(symbol, exchange, tf, _from, to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol: Тикер (Код финансового инструмента) (required)
        :param str exchange: Биржа (required)
        :param str tf: Длительность таймфрейма в секундах или код (\"D\" - дни, \"W\" - недели, \"M\" - месяцы, \"Y\" - годы) (required)
        :param int _from: Начало отрезка времени (UTC) в формате Unix Time Seconds (required)
        :param int to: Конец отрезка времени (UTC) в формате Unix Time Seconds (required)
        :param str format: Формат возвращаемого сервером JSON
        :return: History
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dev_history_with_http_info(symbol, exchange, tf, _from, to, **kwargs)  # noqa: E501
        else:
            (data) = self.dev_history_with_http_info(symbol, exchange, tf, _from, to, **kwargs)  # noqa: E501
            return data

    def dev_history_with_http_info(self, symbol, exchange, tf, _from, to, **kwargs):  # noqa: E501
        """Запрос истории для выбранных биржи и инструмента  # noqa: E501

        Запрос истории рынка для выбранных биржи и финансового инструмента. Данные имеют задержку в 15 минут, если запрос не авторизован. Для авторизованных клиентов задержка не применяется.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dev_history_with_http_info(symbol, exchange, tf, _from, to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol: Тикер (Код финансового инструмента) (required)
        :param str exchange: Биржа (required)
        :param str tf: Длительность таймфрейма в секундах или код (\"D\" - дни, \"W\" - недели, \"M\" - месяцы, \"Y\" - годы) (required)
        :param int _from: Начало отрезка времени (UTC) в формате Unix Time Seconds (required)
        :param int to: Конец отрезка времени (UTC) в формате Unix Time Seconds (required)
        :param str format: Формат возвращаемого сервером JSON
        :return: History
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['symbol', 'exchange', 'tf', '_from', 'to', 'format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dev_history" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'symbol' is set
        if ('symbol' not in params or
                params['symbol'] is None):
            raise ValueError("Missing the required parameter `symbol` when calling `dev_history`")  # noqa: E501
        # verify the required parameter 'exchange' is set
        if ('exchange' not in params or
                params['exchange'] is None):
            raise ValueError("Missing the required parameter `exchange` when calling `dev_history`")  # noqa: E501
        # verify the required parameter 'tf' is set
        if ('tf' not in params or
                params['tf'] is None):
            raise ValueError("Missing the required parameter `tf` when calling `dev_history`")  # noqa: E501
        # verify the required parameter '_from' is set
        if ('_from' not in params or
                params['_from'] is None):
            raise ValueError("Missing the required parameter `_from` when calling `dev_history`")  # noqa: E501
        # verify the required parameter 'to' is set
        if ('to' not in params or
                params['to'] is None):
            raise ValueError("Missing the required parameter `to` when calling `dev_history`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'symbol' in params:
            query_params.append(('symbol', params['symbol']))  # noqa: E501
        if 'exchange' in params:
            query_params.append(('exchange', params['exchange']))  # noqa: E501
        if 'tf' in params:
            query_params.append(('tf', params['tf']))  # noqa: E501
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/md/v2/history', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='History',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dev_orderbook_exchang_seccode(self, exchange, seccode, **kwargs):  # noqa: E501
        """Получение информации о биржевом стакане  # noqa: E501

        Запрос биржевого стакана  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dev_orderbook_exchang_seccode(exchange, seccode, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str exchange: Биржа (required)
        :param str seccode: Инструмент (required)
        :param int depth: Глубина стакана. Стандартное и максимальное значение - 20 (20х20).
        :param str format: Формат возвращаемого сервером JSON
        :return: Orderbook
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dev_orderbook_exchang_seccode_with_http_info(exchange, seccode, **kwargs)  # noqa: E501
        else:
            (data) = self.dev_orderbook_exchang_seccode_with_http_info(exchange, seccode, **kwargs)  # noqa: E501
            return data

    def dev_orderbook_exchang_seccode_with_http_info(self, exchange, seccode, **kwargs):  # noqa: E501
        """Получение информации о биржевом стакане  # noqa: E501

        Запрос биржевого стакана  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dev_orderbook_exchang_seccode_with_http_info(exchange, seccode, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str exchange: Биржа (required)
        :param str seccode: Инструмент (required)
        :param int depth: Глубина стакана. Стандартное и максимальное значение - 20 (20х20).
        :param str format: Формат возвращаемого сервером JSON
        :return: Orderbook
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exchange', 'seccode', 'depth', 'format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dev_orderbook_exchang_seccode" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exchange' is set
        if ('exchange' not in params or
                params['exchange'] is None):
            raise ValueError("Missing the required parameter `exchange` when calling `dev_orderbook_exchang_seccode`")  # noqa: E501
        # verify the required parameter 'seccode' is set
        if ('seccode' not in params or
                params['seccode'] is None):
            raise ValueError("Missing the required parameter `seccode` when calling `dev_orderbook_exchang_seccode`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exchange' in params:
            path_params['exchange'] = params['exchange']  # noqa: E501
        if 'seccode' in params:
            path_params['seccode'] = params['seccode']  # noqa: E501

        query_params = []
        if 'depth' in params:
            query_params.append(('depth', params['depth']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/md/v2/orderbooks/{exchange}/{seccode}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Orderbook',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dev_quotes(self, symbols, **kwargs):  # noqa: E501
        """Получение информации о котировках для выбранных инструментов  # noqa: E501

        Запрос информации о котировках для выбранных инструментов и бирж  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dev_quotes(symbols, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbols: Принимает несколько пар биржа-тикер. Пары отделены запятыми. Биржа и тикер разделены двоеточием (required)
        :param str format: Формат возвращаемого сервером JSON
        :return: Symbols
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dev_quotes_with_http_info(symbols, **kwargs)  # noqa: E501
        else:
            (data) = self.dev_quotes_with_http_info(symbols, **kwargs)  # noqa: E501
            return data

    def dev_quotes_with_http_info(self, symbols, **kwargs):  # noqa: E501
        """Получение информации о котировках для выбранных инструментов  # noqa: E501

        Запрос информации о котировках для выбранных инструментов и бирж  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dev_quotes_with_http_info(symbols, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbols: Принимает несколько пар биржа-тикер. Пары отделены запятыми. Биржа и тикер разделены двоеточием (required)
        :param str format: Формат возвращаемого сервером JSON
        :return: Symbols
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['symbols', 'format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dev_quotes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'symbols' is set
        if ('symbols' not in params or
                params['symbols'] is None):
            raise ValueError("Missing the required parameter `symbols` when calling `dev_quotes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'symbols' in params:
            path_params['symbols'] = params['symbols']  # noqa: E501

        query_params = []
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/md/v2/Securities/{symbols}/quotes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Symbols',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dev_securities_futures(self, exchange, symbol, **kwargs):  # noqa: E501
        """Получение котировки по ближайшему фьючерсу (код)  # noqa: E501

        Запрос котировки по ближайшему фьючерсу (только по коду, без даты)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dev_securities_futures(exchange, symbol, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str exchange: Биржа (required)
        :param str symbol: Тикер (Код финансового инструмента) (required)
        :param str format: Формат возвращаемого сервером JSON
        :return: SymbolFutures
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dev_securities_futures_with_http_info(exchange, symbol, **kwargs)  # noqa: E501
        else:
            (data) = self.dev_securities_futures_with_http_info(exchange, symbol, **kwargs)  # noqa: E501
            return data

    def dev_securities_futures_with_http_info(self, exchange, symbol, **kwargs):  # noqa: E501
        """Получение котировки по ближайшему фьючерсу (код)  # noqa: E501

        Запрос котировки по ближайшему фьючерсу (только по коду, без даты)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dev_securities_futures_with_http_info(exchange, symbol, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str exchange: Биржа (required)
        :param str symbol: Тикер (Код финансового инструмента) (required)
        :param str format: Формат возвращаемого сервером JSON
        :return: SymbolFutures
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exchange', 'symbol', 'format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dev_securities_futures" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exchange' is set
        if ('exchange' not in params or
                params['exchange'] is None):
            raise ValueError("Missing the required parameter `exchange` when calling `dev_securities_futures`")  # noqa: E501
        # verify the required parameter 'symbol' is set
        if ('symbol' not in params or
                params['symbol'] is None):
            raise ValueError("Missing the required parameter `symbol` when calling `dev_securities_futures`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exchange' in params:
            path_params['exchange'] = params['exchange']  # noqa: E501
        if 'symbol' in params:
            path_params['symbol'] = params['symbol']  # noqa: E501

        query_params = []
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/md/v2/Securities/{exchange}/{symbol}/actualFuturesQuote', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SymbolFutures',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dev_securities_search(self, query, **kwargs):  # noqa: E501
        """Получение информации о торговых инструментах  # noqa: E501

        Запрос информации о торговых инструментах  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dev_securities_search(query, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: Тикер (Код финансового инструмента) (required)
        :param int limit: Ограничение на количество выдаваемых результатов поиска
        :param str sector: Рынок на бирже
        :param str cficode: Код финансового инструмента по стандарту ISO 10962
        :param str exchange: Биржа
        :param str format: Формат возвращаемого сервером JSON
        :return: Securities
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dev_securities_search_with_http_info(query, **kwargs)  # noqa: E501
        else:
            (data) = self.dev_securities_search_with_http_info(query, **kwargs)  # noqa: E501
            return data

    def dev_securities_search_with_http_info(self, query, **kwargs):  # noqa: E501
        """Получение информации о торговых инструментах  # noqa: E501

        Запрос информации о торговых инструментах  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dev_securities_search_with_http_info(query, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: Тикер (Код финансового инструмента) (required)
        :param int limit: Ограничение на количество выдаваемых результатов поиска
        :param str sector: Рынок на бирже
        :param str cficode: Код финансового инструмента по стандарту ISO 10962
        :param str exchange: Биржа
        :param str format: Формат возвращаемого сервером JSON
        :return: Securities
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['query', 'limit', 'sector', 'cficode', 'exchange', 'format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dev_securities_search" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'query' is set
        if ('query' not in params or
                params['query'] is None):
            raise ValueError("Missing the required parameter `query` when calling `dev_securities_search`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'query' in params:
            query_params.append(('query', params['query']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'sector' in params:
            query_params.append(('sector', params['sector']))  # noqa: E501
        if 'cficode' in params:
            query_params.append(('cficode', params['cficode']))  # noqa: E501
        if 'exchange' in params:
            query_params.append(('exchange', params['exchange']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/md/v2/Securities', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Securities',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dev_securities_search_all_trades(self, exchange, symbol, **kwargs):  # noqa: E501
        """Получение информации о всех сделках по ценным бумагам за сегодня  # noqa: E501

        Запросить данные о всех сделках (лента) по ценным бумагам за сегодняшний день  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dev_securities_search_all_trades(exchange, symbol, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str exchange: Биржа (required)
        :param str symbol: Тикер (Код финансового инструмента) (required)
        :param str format: Формат возвращаемого сервером JSON
        :param int _from: Начало отрезка времени (UTC) для фильтра результатов в формате Unix Time Seconds
        :param int to: Конец отрезка времени (UTC) для фильтра результатов в формате Unix Time Seconds
        :return: Alltrades
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dev_securities_search_all_trades_with_http_info(exchange, symbol, **kwargs)  # noqa: E501
        else:
            (data) = self.dev_securities_search_all_trades_with_http_info(exchange, symbol, **kwargs)  # noqa: E501
            return data

    def dev_securities_search_all_trades_with_http_info(self, exchange, symbol, **kwargs):  # noqa: E501
        """Получение информации о всех сделках по ценным бумагам за сегодня  # noqa: E501

        Запросить данные о всех сделках (лента) по ценным бумагам за сегодняшний день  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dev_securities_search_all_trades_with_http_info(exchange, symbol, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str exchange: Биржа (required)
        :param str symbol: Тикер (Код финансового инструмента) (required)
        :param str format: Формат возвращаемого сервером JSON
        :param int _from: Начало отрезка времени (UTC) для фильтра результатов в формате Unix Time Seconds
        :param int to: Конец отрезка времени (UTC) для фильтра результатов в формате Unix Time Seconds
        :return: Alltrades
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exchange', 'symbol', 'format', '_from', 'to']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dev_securities_search_all_trades" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exchange' is set
        if ('exchange' not in params or
                params['exchange'] is None):
            raise ValueError("Missing the required parameter `exchange` when calling `dev_securities_search_all_trades`")  # noqa: E501
        # verify the required parameter 'symbol' is set
        if ('symbol' not in params or
                params['symbol'] is None):
            raise ValueError("Missing the required parameter `symbol` when calling `dev_securities_search_all_trades`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exchange' in params:
            path_params['exchange'] = params['exchange']  # noqa: E501
        if 'symbol' in params:
            path_params['symbol'] = params['symbol']  # noqa: E501

        query_params = []
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/md/v2/Securities/{exchange}/{symbol}/alltrades', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Alltrades',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dev_securities_search_exchange(self, exchange, **kwargs):  # noqa: E501
        """Получение информации о торговых инструментах на выбранной бирже  # noqa: E501

        Запрос информации об инструментах на выбранной бирже  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dev_securities_search_exchange(exchange, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str exchange: Биржа (required)
        :param str format: Формат возвращаемого сервером JSON
        :return: Securities
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dev_securities_search_exchange_with_http_info(exchange, **kwargs)  # noqa: E501
        else:
            (data) = self.dev_securities_search_exchange_with_http_info(exchange, **kwargs)  # noqa: E501
            return data

    def dev_securities_search_exchange_with_http_info(self, exchange, **kwargs):  # noqa: E501
        """Получение информации о торговых инструментах на выбранной бирже  # noqa: E501

        Запрос информации об инструментах на выбранной бирже  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dev_securities_search_exchange_with_http_info(exchange, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str exchange: Биржа (required)
        :param str format: Формат возвращаемого сервером JSON
        :return: Securities
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exchange', 'format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dev_securities_search_exchange" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exchange' is set
        if ('exchange' not in params or
                params['exchange'] is None):
            raise ValueError("Missing the required parameter `exchange` when calling `dev_securities_search_exchange`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exchange' in params:
            path_params['exchange'] = params['exchange']  # noqa: E501

        query_params = []
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/md/v2/Securities/{exchange}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Securities',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dev_securities_search_exchange_code(self, exchange, symbol, **kwargs):  # noqa: E501
        """Получение информации о выбранном финансовом инструменте  # noqa: E501

        Запрос информации о выбранном финансовом инструменте на бирже  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dev_securities_search_exchange_code(exchange, symbol, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str exchange: Биржа (required)
        :param str symbol: Тикер (Код финансового инструмента) (required)
        :param str format: Формат возвращаемого сервером JSON
        :return: Security
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dev_securities_search_exchange_code_with_http_info(exchange, symbol, **kwargs)  # noqa: E501
        else:
            (data) = self.dev_securities_search_exchange_code_with_http_info(exchange, symbol, **kwargs)  # noqa: E501
            return data

    def dev_securities_search_exchange_code_with_http_info(self, exchange, symbol, **kwargs):  # noqa: E501
        """Получение информации о выбранном финансовом инструменте  # noqa: E501

        Запрос информации о выбранном финансовом инструменте на бирже  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dev_securities_search_exchange_code_with_http_info(exchange, symbol, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str exchange: Биржа (required)
        :param str symbol: Тикер (Код финансового инструмента) (required)
        :param str format: Формат возвращаемого сервером JSON
        :return: Security
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exchange', 'symbol', 'format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dev_securities_search_exchange_code" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exchange' is set
        if ('exchange' not in params or
                params['exchange'] is None):
            raise ValueError("Missing the required parameter `exchange` when calling `dev_securities_search_exchange_code`")  # noqa: E501
        # verify the required parameter 'symbol' is set
        if ('symbol' not in params or
                params['symbol'] is None):
            raise ValueError("Missing the required parameter `symbol` when calling `dev_securities_search_exchange_code`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exchange' in params:
            path_params['exchange'] = params['exchange']  # noqa: E501
        if 'symbol' in params:
            path_params['symbol'] = params['symbol']  # noqa: E501

        query_params = []
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/md/v2/Securities/{exchange}/{symbol}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Security',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dev_user_portfolio(self, username, **kwargs):  # noqa: E501
        """Получение списка серверов портфелей  # noqa: E501

        Получение списка серверов по секциям «Валютный Рынок», «Срочный Рынок», «Фондовый Рынок». В ответе в поле tradeServerCode содержится значение которое надо использовать  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dev_user_portfolio(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: Имя пользователя (required)
        :return: ServersInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dev_user_portfolio_with_http_info(username, **kwargs)  # noqa: E501
        else:
            (data) = self.dev_user_portfolio_with_http_info(username, **kwargs)  # noqa: E501
            return data

    def dev_user_portfolio_with_http_info(self, username, **kwargs):  # noqa: E501
        """Получение списка серверов портфелей  # noqa: E501

        Получение списка серверов по секциям «Валютный Рынок», «Срочный Рынок», «Фондовый Рынок». В ответе в поле tradeServerCode содержится значение которое надо использовать  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dev_user_portfolio_with_http_info(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: Имя пользователя (required)
        :return: ServersInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['username']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dev_user_portfolio" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in params or
                params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `dev_user_portfolio`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in params:
            path_params['username'] = params['username']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/client/v1.0/users/{username}/portfolios', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ServersInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def exchange_portfolio_money(self, exchange, portfolio, **kwargs):  # noqa: E501
        """Получение информации по деньгам для выбранного портфеля  # noqa: E501

        Запрос информации о позиции по деньгам. Вызов существует для обратной совместимости с API v1, предпочтительно использовать другие вызовы (/summary, /risk, /positions)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exchange_portfolio_money(exchange, portfolio, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str exchange: Биржа (required)
        :param str portfolio: Идентификатор клиентского портфеля (required)
        :param str format: Формат возвращаемого сервером JSON
        :return: Money
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.exchange_portfolio_money_with_http_info(exchange, portfolio, **kwargs)  # noqa: E501
        else:
            (data) = self.exchange_portfolio_money_with_http_info(exchange, portfolio, **kwargs)  # noqa: E501
            return data

    def exchange_portfolio_money_with_http_info(self, exchange, portfolio, **kwargs):  # noqa: E501
        """Получение информации по деньгам для выбранного портфеля  # noqa: E501

        Запрос информации о позиции по деньгам. Вызов существует для обратной совместимости с API v1, предпочтительно использовать другие вызовы (/summary, /risk, /positions)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exchange_portfolio_money_with_http_info(exchange, portfolio, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str exchange: Биржа (required)
        :param str portfolio: Идентификатор клиентского портфеля (required)
        :param str format: Формат возвращаемого сервером JSON
        :return: Money
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exchange', 'portfolio', 'format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exchange_portfolio_money" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exchange' is set
        if ('exchange' not in params or
                params['exchange'] is None):
            raise ValueError("Missing the required parameter `exchange` when calling `exchange_portfolio_money`")  # noqa: E501
        # verify the required parameter 'portfolio' is set
        if ('portfolio' not in params or
                params['portfolio'] is None):
            raise ValueError("Missing the required parameter `portfolio` when calling `exchange_portfolio_money`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exchange' in params:
            path_params['exchange'] = params['exchange']  # noqa: E501
        if 'portfolio' in params:
            path_params['portfolio'] = params['portfolio']  # noqa: E501

        query_params = []
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/md/v2/clients/legacy/{exchange}/{portfolio}/money', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Money',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def exchange_portfolio_summary(self, exchange, portfolio, **kwargs):  # noqa: E501
        """Получение информации о портфеле  # noqa: E501

        Запрос сводной информации о портфеле  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exchange_portfolio_summary(exchange, portfolio, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str exchange: Биржа (required)
        :param str portfolio: Идентификатор клиентского портфеля (required)
        :param str format: Формат возвращаемого сервером JSON
        :return: Summary
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.exchange_portfolio_summary_with_http_info(exchange, portfolio, **kwargs)  # noqa: E501
        else:
            (data) = self.exchange_portfolio_summary_with_http_info(exchange, portfolio, **kwargs)  # noqa: E501
            return data

    def exchange_portfolio_summary_with_http_info(self, exchange, portfolio, **kwargs):  # noqa: E501
        """Получение информации о портфеле  # noqa: E501

        Запрос сводной информации о портфеле  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exchange_portfolio_summary_with_http_info(exchange, portfolio, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str exchange: Биржа (required)
        :param str portfolio: Идентификатор клиентского портфеля (required)
        :param str format: Формат возвращаемого сервером JSON
        :return: Summary
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exchange', 'portfolio', 'format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exchange_portfolio_summary" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exchange' is set
        if ('exchange' not in params or
                params['exchange'] is None):
            raise ValueError("Missing the required parameter `exchange` when calling `exchange_portfolio_summary`")  # noqa: E501
        # verify the required parameter 'portfolio' is set
        if ('portfolio' not in params or
                params['portfolio'] is None):
            raise ValueError("Missing the required parameter `portfolio` when calling `exchange_portfolio_summary`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exchange' in params:
            path_params['exchange'] = params['exchange']  # noqa: E501
        if 'portfolio' in params:
            path_params['portfolio'] = params['portfolio']  # noqa: E501

        query_params = []
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/md/v2/clients/{exchange}/{portfolio}/summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Summary',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fortsrisk(self, exchange, portfolio, **kwargs):  # noqa: E501
        """Получение информации о рисках на срочном рынке  # noqa: E501

        Запрос информации о рисках на срочном рынке для выбранного портфеля  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fortsrisk(exchange, portfolio, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str exchange: Биржа (required)
        :param str portfolio: Идентификатор клиентского портфеля (required)
        :param str format: Формат возвращаемого сервером JSON
        :return: Fortsrisk
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.fortsrisk_with_http_info(exchange, portfolio, **kwargs)  # noqa: E501
        else:
            (data) = self.fortsrisk_with_http_info(exchange, portfolio, **kwargs)  # noqa: E501
            return data

    def fortsrisk_with_http_info(self, exchange, portfolio, **kwargs):  # noqa: E501
        """Получение информации о рисках на срочном рынке  # noqa: E501

        Запрос информации о рисках на срочном рынке для выбранного портфеля  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fortsrisk_with_http_info(exchange, portfolio, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str exchange: Биржа (required)
        :param str portfolio: Идентификатор клиентского портфеля (required)
        :param str format: Формат возвращаемого сервером JSON
        :return: Fortsrisk
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exchange', 'portfolio', 'format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fortsrisk" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exchange' is set
        if ('exchange' not in params or
                params['exchange'] is None):
            raise ValueError("Missing the required parameter `exchange` when calling `fortsrisk`")  # noqa: E501
        # verify the required parameter 'portfolio' is set
        if ('portfolio' not in params or
                params['portfolio'] is None):
            raise ValueError("Missing the required parameter `portfolio` when calling `fortsrisk`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exchange' in params:
            path_params['exchange'] = params['exchange']  # noqa: E501
        if 'portfolio' in params:
            path_params['portfolio'] = params['portfolio']  # noqa: E501

        query_params = []
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/md/v2/Clients/{exchange}/{portfolio}/fortsrisk', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Fortsrisk',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def local_time(self, **kwargs):  # noqa: E501
        """Запрос текущего UTC времени в формате Unix  # noqa: E501

        Запрос текущего UTC времени в формате Unix Time Seconds. Если этот запрос выполнен без авторизации, то будет возвращено время, которое было 15 минут назад.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.local_time(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Time
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.local_time_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.local_time_with_http_info(**kwargs)  # noqa: E501
            return data

    def local_time_with_http_info(self, **kwargs):  # noqa: E501
        """Запрос текущего UTC времени в формате Unix  # noqa: E501

        Запрос текущего UTC времени в формате Unix Time Seconds. Если этот запрос выполнен без авторизации, то будет возвращено время, которое было 15 минут назад.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.local_time_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Time
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method local_time" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/md/v2/time', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Time',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def risk(self, exchange, portfolio, **kwargs):  # noqa: E501
        """Получение информации о рисках  # noqa: E501

        Запрос информации о рисках  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.risk(exchange, portfolio, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str exchange: Биржа (required)
        :param str portfolio: Идентификатор клиентского портфеля (required)
        :param str format: Формат возвращаемого сервером JSON
        :return: Risk
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.risk_with_http_info(exchange, portfolio, **kwargs)  # noqa: E501
        else:
            (data) = self.risk_with_http_info(exchange, portfolio, **kwargs)  # noqa: E501
            return data

    def risk_with_http_info(self, exchange, portfolio, **kwargs):  # noqa: E501
        """Получение информации о рисках  # noqa: E501

        Запрос информации о рисках  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.risk_with_http_info(exchange, portfolio, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str exchange: Биржа (required)
        :param str portfolio: Идентификатор клиентского портфеля (required)
        :param str format: Формат возвращаемого сервером JSON
        :return: Risk
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exchange', 'portfolio', 'format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method risk" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exchange' is set
        if ('exchange' not in params or
                params['exchange'] is None):
            raise ValueError("Missing the required parameter `exchange` when calling `risk`")  # noqa: E501
        # verify the required parameter 'portfolio' is set
        if ('portfolio' not in params or
                params['portfolio'] is None):
            raise ValueError("Missing the required parameter `portfolio` when calling `risk`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exchange' in params:
            path_params['exchange'] = params['exchange']  # noqa: E501
        if 'portfolio' in params:
            path_params['portfolio'] = params['portfolio']  # noqa: E501

        query_params = []
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/md/v2/Clients/{exchange}/{portfolio}/risk', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Risk',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2clientordersactionsorder_id(self, trade_server_code, order_id, portfolio, stop, x_alor_reqid, **kwargs):  # noqa: E501
        """Снятие стоп-заявки  # noqa: E501

        Снятие стоп-заявки с указанным идентификатором  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2clientordersactionsorder_id(trade_server_code, order_id, portfolio, stop, x_alor_reqid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str trade_server_code: Код торгового сервера (required)
        :param int order_id: Идентификатор заявки (required)
        :param str portfolio: Идентификатор клиентского портфеля (required)
        :param bool stop: Является стоп-заявкой? (required)
        :param str x_alor_reqid: Требуется уникальная случайная строка в качестве идентификатора запроса. Если уже приходил запрос с таким идентификатором, то заявка не будет исполнена повторно, а в качестве ответа будет возвращена копия ответа на первый запрос с таким значением идентификатора (required)
        :return: OrdersActionsDeleteOrderId
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2clientordersactionsorder_id_with_http_info(trade_server_code, order_id, portfolio, stop, x_alor_reqid, **kwargs)  # noqa: E501
        else:
            (data) = self.v2clientordersactionsorder_id_with_http_info(trade_server_code, order_id, portfolio, stop, x_alor_reqid, **kwargs)  # noqa: E501
            return data

    def v2clientordersactionsorder_id_with_http_info(self, trade_server_code, order_id, portfolio, stop, x_alor_reqid, **kwargs):  # noqa: E501
        """Снятие стоп-заявки  # noqa: E501

        Снятие стоп-заявки с указанным идентификатором  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2clientordersactionsorder_id_with_http_info(trade_server_code, order_id, portfolio, stop, x_alor_reqid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str trade_server_code: Код торгового сервера (required)
        :param int order_id: Идентификатор заявки (required)
        :param str portfolio: Идентификатор клиентского портфеля (required)
        :param bool stop: Является стоп-заявкой? (required)
        :param str x_alor_reqid: Требуется уникальная случайная строка в качестве идентификатора запроса. Если уже приходил запрос с таким идентификатором, то заявка не будет исполнена повторно, а в качестве ответа будет возвращена копия ответа на первый запрос с таким значением идентификатора (required)
        :return: OrdersActionsDeleteOrderId
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['trade_server_code', 'order_id', 'portfolio', 'stop', 'x_alor_reqid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2clientordersactionsorder_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'trade_server_code' is set
        if ('trade_server_code' not in params or
                params['trade_server_code'] is None):
            raise ValueError("Missing the required parameter `trade_server_code` when calling `v2clientordersactionsorder_id`")  # noqa: E501
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `v2clientordersactionsorder_id`")  # noqa: E501
        # verify the required parameter 'portfolio' is set
        if ('portfolio' not in params or
                params['portfolio'] is None):
            raise ValueError("Missing the required parameter `portfolio` when calling `v2clientordersactionsorder_id`")  # noqa: E501
        # verify the required parameter 'stop' is set
        if ('stop' not in params or
                params['stop'] is None):
            raise ValueError("Missing the required parameter `stop` when calling `v2clientordersactionsorder_id`")  # noqa: E501
        # verify the required parameter 'x_alor_reqid' is set
        if ('x_alor_reqid' not in params or
                params['x_alor_reqid'] is None):
            raise ValueError("Missing the required parameter `x_alor_reqid` when calling `v2clientordersactionsorder_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'trade_server_code' in params:
            path_params['tradeServerCode'] = params['trade_server_code']  # noqa: E501
        if 'order_id' in params:
            path_params['orderId'] = params['order_id']  # noqa: E501

        query_params = []
        if 'portfolio' in params:
            query_params.append(('portfolio', params['portfolio']))  # noqa: E501
        if 'stop' in params:
            query_params.append(('stop', params['stop']))  # noqa: E501

        header_params = {}
        if 'x_alor_reqid' in params:
            header_params['X-ALOR-REQID'] = params['x_alor_reqid']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'string'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/warptrans/{tradeServerCode}/v2/client/orders/{orderId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrdersActionsDeleteOrderId',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2clientordersactionsstop_loss(self, body, x_alor_reqid, trade_server_code, **kwargs):  # noqa: E501
        """Создание стоп-лосс заявки  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2clientordersactionsstop_loss(body, x_alor_reqid, trade_server_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BodyrequestOrdersActionsStop body: Тело заявки (required)
        :param str x_alor_reqid: Требуется уникальная случайная строка в качестве идентификатора запроса. Если уже приходил запрос с таким идентификатором, то заявка не будет исполнена повторно, а в качестве ответа будет возвращена копия ответа на первый запрос с таким значением идентификатора (required)
        :param str trade_server_code: Код торгового сервера (required)
        :return: OrdersActionsStopProfitLoss
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2clientordersactionsstop_loss_with_http_info(body, x_alor_reqid, trade_server_code, **kwargs)  # noqa: E501
        else:
            (data) = self.v2clientordersactionsstop_loss_with_http_info(body, x_alor_reqid, trade_server_code, **kwargs)  # noqa: E501
            return data

    def v2clientordersactionsstop_loss_with_http_info(self, body, x_alor_reqid, trade_server_code, **kwargs):  # noqa: E501
        """Создание стоп-лосс заявки  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2clientordersactionsstop_loss_with_http_info(body, x_alor_reqid, trade_server_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BodyrequestOrdersActionsStop body: Тело заявки (required)
        :param str x_alor_reqid: Требуется уникальная случайная строка в качестве идентификатора запроса. Если уже приходил запрос с таким идентификатором, то заявка не будет исполнена повторно, а в качестве ответа будет возвращена копия ответа на первый запрос с таким значением идентификатора (required)
        :param str trade_server_code: Код торгового сервера (required)
        :return: OrdersActionsStopProfitLoss
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_alor_reqid', 'trade_server_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2clientordersactionsstop_loss" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `v2clientordersactionsstop_loss`")  # noqa: E501
        # verify the required parameter 'x_alor_reqid' is set
        if ('x_alor_reqid' not in params or
                params['x_alor_reqid'] is None):
            raise ValueError("Missing the required parameter `x_alor_reqid` when calling `v2clientordersactionsstop_loss`")  # noqa: E501
        # verify the required parameter 'trade_server_code' is set
        if ('trade_server_code' not in params or
                params['trade_server_code'] is None):
            raise ValueError("Missing the required parameter `trade_server_code` when calling `v2clientordersactionsstop_loss`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'trade_server_code' in params:
            path_params['tradeServerCode'] = params['trade_server_code']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_alor_reqid' in params:
            header_params['X-ALOR-REQID'] = params['x_alor_reqid']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/warptrans/{tradeServerCode}/v2/client/orders/actions/stopLoss', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrdersActionsStopProfitLoss',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2clientordersactionsstop_loss_limit(self, body, x_alor_reqid, trade_server_code, **kwargs):  # noqa: E501
        """Создание стоп-лосс лимит заявки  # noqa: E501

        Создание стоп-лосс лимит заявки  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2clientordersactionsstop_loss_limit(body, x_alor_reqid, trade_server_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BodyrequestOrdersActionsStoplimit body: Тело заявки (required)
        :param str x_alor_reqid: Требуется уникальная случайная строка в качестве идентификатора запроса. Если уже приходил запрос с таким идентификатором, то заявка не будет исполнена повторно, а в качестве ответа будет возвращена копия ответа на первый запрос с таким значением идентификатора (required)
        :param str trade_server_code: Код торгового сервера (required)
        :return: OrdersActionsStopProfitLoss
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2clientordersactionsstop_loss_limit_with_http_info(body, x_alor_reqid, trade_server_code, **kwargs)  # noqa: E501
        else:
            (data) = self.v2clientordersactionsstop_loss_limit_with_http_info(body, x_alor_reqid, trade_server_code, **kwargs)  # noqa: E501
            return data

    def v2clientordersactionsstop_loss_limit_with_http_info(self, body, x_alor_reqid, trade_server_code, **kwargs):  # noqa: E501
        """Создание стоп-лосс лимит заявки  # noqa: E501

        Создание стоп-лосс лимит заявки  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2clientordersactionsstop_loss_limit_with_http_info(body, x_alor_reqid, trade_server_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BodyrequestOrdersActionsStoplimit body: Тело заявки (required)
        :param str x_alor_reqid: Требуется уникальная случайная строка в качестве идентификатора запроса. Если уже приходил запрос с таким идентификатором, то заявка не будет исполнена повторно, а в качестве ответа будет возвращена копия ответа на первый запрос с таким значением идентификатора (required)
        :param str trade_server_code: Код торгового сервера (required)
        :return: OrdersActionsStopProfitLoss
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_alor_reqid', 'trade_server_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2clientordersactionsstop_loss_limit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `v2clientordersactionsstop_loss_limit`")  # noqa: E501
        # verify the required parameter 'x_alor_reqid' is set
        if ('x_alor_reqid' not in params or
                params['x_alor_reqid'] is None):
            raise ValueError("Missing the required parameter `x_alor_reqid` when calling `v2clientordersactionsstop_loss_limit`")  # noqa: E501
        # verify the required parameter 'trade_server_code' is set
        if ('trade_server_code' not in params or
                params['trade_server_code'] is None):
            raise ValueError("Missing the required parameter `trade_server_code` when calling `v2clientordersactionsstop_loss_limit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'trade_server_code' in params:
            path_params['tradeServerCode'] = params['trade_server_code']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_alor_reqid' in params:
            header_params['X-ALOR-REQID'] = params['x_alor_reqid']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/warptrans/{tradeServerCode}/v2/client/orders/actions/stopLossLimit', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrdersActionsStopProfitLoss',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2clientordersactionsstop_loss_limitorder_id(self, body, x_alor_reqid, trade_server_code, order_id, **kwargs):  # noqa: E501
        """Изменение стоп-лосс лимит заявки  # noqa: E501

        Изменение стоп-лосс лимит заявки с указанным номером  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2clientordersactionsstop_loss_limitorder_id(body, x_alor_reqid, trade_server_code, order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BodyrequestOrdersActionsStoplimit body: Тело заявки (required)
        :param str x_alor_reqid: Требуется уникальная случайная строка в качестве идентификатора запроса. Если уже приходил запрос с таким идентификатором, то заявка не будет исполнена повторно, а в качестве ответа будет возвращена копия ответа на первый запрос с таким значением идентификатора (required)
        :param str trade_server_code: Код торгового сервера (required)
        :param int order_id: Идентификатор заявки (required)
        :return: OrdersActionsStopProfitLoss
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2clientordersactionsstop_loss_limitorder_id_with_http_info(body, x_alor_reqid, trade_server_code, order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v2clientordersactionsstop_loss_limitorder_id_with_http_info(body, x_alor_reqid, trade_server_code, order_id, **kwargs)  # noqa: E501
            return data

    def v2clientordersactionsstop_loss_limitorder_id_with_http_info(self, body, x_alor_reqid, trade_server_code, order_id, **kwargs):  # noqa: E501
        """Изменение стоп-лосс лимит заявки  # noqa: E501

        Изменение стоп-лосс лимит заявки с указанным номером  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2clientordersactionsstop_loss_limitorder_id_with_http_info(body, x_alor_reqid, trade_server_code, order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BodyrequestOrdersActionsStoplimit body: Тело заявки (required)
        :param str x_alor_reqid: Требуется уникальная случайная строка в качестве идентификатора запроса. Если уже приходил запрос с таким идентификатором, то заявка не будет исполнена повторно, а в качестве ответа будет возвращена копия ответа на первый запрос с таким значением идентификатора (required)
        :param str trade_server_code: Код торгового сервера (required)
        :param int order_id: Идентификатор заявки (required)
        :return: OrdersActionsStopProfitLoss
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_alor_reqid', 'trade_server_code', 'order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2clientordersactionsstop_loss_limitorder_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `v2clientordersactionsstop_loss_limitorder_id`")  # noqa: E501
        # verify the required parameter 'x_alor_reqid' is set
        if ('x_alor_reqid' not in params or
                params['x_alor_reqid'] is None):
            raise ValueError("Missing the required parameter `x_alor_reqid` when calling `v2clientordersactionsstop_loss_limitorder_id`")  # noqa: E501
        # verify the required parameter 'trade_server_code' is set
        if ('trade_server_code' not in params or
                params['trade_server_code'] is None):
            raise ValueError("Missing the required parameter `trade_server_code` when calling `v2clientordersactionsstop_loss_limitorder_id`")  # noqa: E501
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `v2clientordersactionsstop_loss_limitorder_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'trade_server_code' in params:
            path_params['tradeServerCode'] = params['trade_server_code']  # noqa: E501
        if 'order_id' in params:
            path_params['orderId'] = params['order_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_alor_reqid' in params:
            header_params['X-ALOR-REQID'] = params['x_alor_reqid']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'string'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/warptrans/{tradeServerCode}/v2/client/orders/actions/stopLossLimit/{orderId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrdersActionsStopProfitLoss',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2clientordersactionsstop_lossorder_id(self, body, x_alor_reqid, trade_server_code, order_id, **kwargs):  # noqa: E501
        """Изменение стоп-лосс заявки  # noqa: E501

        Изменение стоп-лосс заявки с указанным номером  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2clientordersactionsstop_lossorder_id(body, x_alor_reqid, trade_server_code, order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BodyrequestOrdersActionsStop body: Тело заявки (required)
        :param str x_alor_reqid: Требуется уникальная случайная строка в качестве идентификатора запроса. Если уже приходил запрос с таким идентификатором, то заявка не будет исполнена повторно, а в качестве ответа будет возвращена копия ответа на первый запрос с таким значением идентификатора (required)
        :param str trade_server_code: Код торгового сервера (required)
        :param int order_id: Идентификатор заявки (required)
        :return: OrdersActionsStopProfitLoss
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2clientordersactionsstop_lossorder_id_with_http_info(body, x_alor_reqid, trade_server_code, order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v2clientordersactionsstop_lossorder_id_with_http_info(body, x_alor_reqid, trade_server_code, order_id, **kwargs)  # noqa: E501
            return data

    def v2clientordersactionsstop_lossorder_id_with_http_info(self, body, x_alor_reqid, trade_server_code, order_id, **kwargs):  # noqa: E501
        """Изменение стоп-лосс заявки  # noqa: E501

        Изменение стоп-лосс заявки с указанным номером  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2clientordersactionsstop_lossorder_id_with_http_info(body, x_alor_reqid, trade_server_code, order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BodyrequestOrdersActionsStop body: Тело заявки (required)
        :param str x_alor_reqid: Требуется уникальная случайная строка в качестве идентификатора запроса. Если уже приходил запрос с таким идентификатором, то заявка не будет исполнена повторно, а в качестве ответа будет возвращена копия ответа на первый запрос с таким значением идентификатора (required)
        :param str trade_server_code: Код торгового сервера (required)
        :param int order_id: Идентификатор заявки (required)
        :return: OrdersActionsStopProfitLoss
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_alor_reqid', 'trade_server_code', 'order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2clientordersactionsstop_lossorder_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `v2clientordersactionsstop_lossorder_id`")  # noqa: E501
        # verify the required parameter 'x_alor_reqid' is set
        if ('x_alor_reqid' not in params or
                params['x_alor_reqid'] is None):
            raise ValueError("Missing the required parameter `x_alor_reqid` when calling `v2clientordersactionsstop_lossorder_id`")  # noqa: E501
        # verify the required parameter 'trade_server_code' is set
        if ('trade_server_code' not in params or
                params['trade_server_code'] is None):
            raise ValueError("Missing the required parameter `trade_server_code` when calling `v2clientordersactionsstop_lossorder_id`")  # noqa: E501
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `v2clientordersactionsstop_lossorder_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'trade_server_code' in params:
            path_params['tradeServerCode'] = params['trade_server_code']  # noqa: E501
        if 'order_id' in params:
            path_params['orderId'] = params['order_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_alor_reqid' in params:
            header_params['X-ALOR-REQID'] = params['x_alor_reqid']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'string'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/warptrans/{tradeServerCode}/v2/client/orders/actions/stopLoss/{orderId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrdersActionsStopProfitLoss',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2clientordersactionstake_profit(self, body, x_alor_reqid, trade_server_code, **kwargs):  # noqa: E501
        """Создание стоп-заявки  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2clientordersactionstake_profit(body, x_alor_reqid, trade_server_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BodyrequestOrdersActionsStop body: Тело заявки (required)
        :param str x_alor_reqid: Требуется уникальная случайная строка в качестве идентификатора запроса. Если уже приходил запрос с таким идентификатором, то заявка не будет исполнена повторно, а в качестве ответа будет возвращена копия ответа на первый запрос с таким значением идентификатора (required)
        :param str trade_server_code: Код торгового сервера (required)
        :return: OrdersActionsStopProfitLoss
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2clientordersactionstake_profit_with_http_info(body, x_alor_reqid, trade_server_code, **kwargs)  # noqa: E501
        else:
            (data) = self.v2clientordersactionstake_profit_with_http_info(body, x_alor_reqid, trade_server_code, **kwargs)  # noqa: E501
            return data

    def v2clientordersactionstake_profit_with_http_info(self, body, x_alor_reqid, trade_server_code, **kwargs):  # noqa: E501
        """Создание стоп-заявки  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2clientordersactionstake_profit_with_http_info(body, x_alor_reqid, trade_server_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BodyrequestOrdersActionsStop body: Тело заявки (required)
        :param str x_alor_reqid: Требуется уникальная случайная строка в качестве идентификатора запроса. Если уже приходил запрос с таким идентификатором, то заявка не будет исполнена повторно, а в качестве ответа будет возвращена копия ответа на первый запрос с таким значением идентификатора (required)
        :param str trade_server_code: Код торгового сервера (required)
        :return: OrdersActionsStopProfitLoss
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_alor_reqid', 'trade_server_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2clientordersactionstake_profit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `v2clientordersactionstake_profit`")  # noqa: E501
        # verify the required parameter 'x_alor_reqid' is set
        if ('x_alor_reqid' not in params or
                params['x_alor_reqid'] is None):
            raise ValueError("Missing the required parameter `x_alor_reqid` when calling `v2clientordersactionstake_profit`")  # noqa: E501
        # verify the required parameter 'trade_server_code' is set
        if ('trade_server_code' not in params or
                params['trade_server_code'] is None):
            raise ValueError("Missing the required parameter `trade_server_code` when calling `v2clientordersactionstake_profit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'trade_server_code' in params:
            path_params['tradeServerCode'] = params['trade_server_code']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_alor_reqid' in params:
            header_params['X-ALOR-REQID'] = params['x_alor_reqid']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/warptrans/{tradeServerCode}/v2/client/orders/actions/takeProfit', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrdersActionsStopProfitLoss',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2clientordersactionstake_profit_limit(self, body, x_alor_reqid, trade_server_code, **kwargs):  # noqa: E501
        """Создание стоп-лимит заявки  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2clientordersactionstake_profit_limit(body, x_alor_reqid, trade_server_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BodyrequestOrdersActionsStoplimit body: Тело заявки (required)
        :param str x_alor_reqid: Требуется уникальная случайная строка в качестве идентификатора запроса. Если уже приходил запрос с таким идентификатором, то заявка не будет исполнена повторно, а в качестве ответа будет возвращена копия ответа на первый запрос с таким значением идентификатора (required)
        :param str trade_server_code: Код торгового сервера (required)
        :return: OrdersActionsStopProfitLoss
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2clientordersactionstake_profit_limit_with_http_info(body, x_alor_reqid, trade_server_code, **kwargs)  # noqa: E501
        else:
            (data) = self.v2clientordersactionstake_profit_limit_with_http_info(body, x_alor_reqid, trade_server_code, **kwargs)  # noqa: E501
            return data

    def v2clientordersactionstake_profit_limit_with_http_info(self, body, x_alor_reqid, trade_server_code, **kwargs):  # noqa: E501
        """Создание стоп-лимит заявки  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2clientordersactionstake_profit_limit_with_http_info(body, x_alor_reqid, trade_server_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BodyrequestOrdersActionsStoplimit body: Тело заявки (required)
        :param str x_alor_reqid: Требуется уникальная случайная строка в качестве идентификатора запроса. Если уже приходил запрос с таким идентификатором, то заявка не будет исполнена повторно, а в качестве ответа будет возвращена копия ответа на первый запрос с таким значением идентификатора (required)
        :param str trade_server_code: Код торгового сервера (required)
        :return: OrdersActionsStopProfitLoss
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_alor_reqid', 'trade_server_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2clientordersactionstake_profit_limit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `v2clientordersactionstake_profit_limit`")  # noqa: E501
        # verify the required parameter 'x_alor_reqid' is set
        if ('x_alor_reqid' not in params or
                params['x_alor_reqid'] is None):
            raise ValueError("Missing the required parameter `x_alor_reqid` when calling `v2clientordersactionstake_profit_limit`")  # noqa: E501
        # verify the required parameter 'trade_server_code' is set
        if ('trade_server_code' not in params or
                params['trade_server_code'] is None):
            raise ValueError("Missing the required parameter `trade_server_code` when calling `v2clientordersactionstake_profit_limit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'trade_server_code' in params:
            path_params['tradeServerCode'] = params['trade_server_code']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_alor_reqid' in params:
            header_params['X-ALOR-REQID'] = params['x_alor_reqid']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/warptrans/{tradeServerCode}/v2/client/orders/actions/takeProfitLimit', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrdersActionsStopProfitLoss',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2clientordersactionstake_profit_limitorder_id(self, body, x_alor_reqid, trade_server_code, order_id, **kwargs):  # noqa: E501
        """Изменение стоп-лимит заявки  # noqa: E501

        Изменение стоп-лимит заявки с указанным номером  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2clientordersactionstake_profit_limitorder_id(body, x_alor_reqid, trade_server_code, order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BodyrequestOrdersActionsStoplimit body: Тело заявки (required)
        :param str x_alor_reqid: Требуется уникальная случайная строка в качестве идентификатора запроса. Если уже приходил запрос с таким идентификатором, то заявка не будет исполнена повторно, а в качестве ответа будет возвращена копия ответа на первый запрос с таким значением идентификатора (required)
        :param str trade_server_code: Код торгового сервера (required)
        :param int order_id: Идентификатор заявки (required)
        :return: OrdersActionsStopProfitLoss
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2clientordersactionstake_profit_limitorder_id_with_http_info(body, x_alor_reqid, trade_server_code, order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v2clientordersactionstake_profit_limitorder_id_with_http_info(body, x_alor_reqid, trade_server_code, order_id, **kwargs)  # noqa: E501
            return data

    def v2clientordersactionstake_profit_limitorder_id_with_http_info(self, body, x_alor_reqid, trade_server_code, order_id, **kwargs):  # noqa: E501
        """Изменение стоп-лимит заявки  # noqa: E501

        Изменение стоп-лимит заявки с указанным номером  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2clientordersactionstake_profit_limitorder_id_with_http_info(body, x_alor_reqid, trade_server_code, order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BodyrequestOrdersActionsStoplimit body: Тело заявки (required)
        :param str x_alor_reqid: Требуется уникальная случайная строка в качестве идентификатора запроса. Если уже приходил запрос с таким идентификатором, то заявка не будет исполнена повторно, а в качестве ответа будет возвращена копия ответа на первый запрос с таким значением идентификатора (required)
        :param str trade_server_code: Код торгового сервера (required)
        :param int order_id: Идентификатор заявки (required)
        :return: OrdersActionsStopProfitLoss
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_alor_reqid', 'trade_server_code', 'order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2clientordersactionstake_profit_limitorder_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `v2clientordersactionstake_profit_limitorder_id`")  # noqa: E501
        # verify the required parameter 'x_alor_reqid' is set
        if ('x_alor_reqid' not in params or
                params['x_alor_reqid'] is None):
            raise ValueError("Missing the required parameter `x_alor_reqid` when calling `v2clientordersactionstake_profit_limitorder_id`")  # noqa: E501
        # verify the required parameter 'trade_server_code' is set
        if ('trade_server_code' not in params or
                params['trade_server_code'] is None):
            raise ValueError("Missing the required parameter `trade_server_code` when calling `v2clientordersactionstake_profit_limitorder_id`")  # noqa: E501
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `v2clientordersactionstake_profit_limitorder_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'trade_server_code' in params:
            path_params['tradeServerCode'] = params['trade_server_code']  # noqa: E501
        if 'order_id' in params:
            path_params['orderId'] = params['order_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_alor_reqid' in params:
            header_params['X-ALOR-REQID'] = params['x_alor_reqid']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'string'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/warptrans/{tradeServerCode}/v2/client/orders/actions/takeProfitLimit/{orderId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrdersActionsStopProfitLoss',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2clientordersactionstake_profitorder_id(self, body, x_alor_reqid, trade_server_code, order_id, **kwargs):  # noqa: E501
        """Изменение стоп-заявки  # noqa: E501

        Изменение стоп-заявки с указанным номером  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2clientordersactionstake_profitorder_id(body, x_alor_reqid, trade_server_code, order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BodyrequestOrdersActionsStop body: Тело заявки (required)
        :param str x_alor_reqid: Требуется уникальная случайная строка в качестве идентификатора запроса. Если уже приходил запрос с таким идентификатором, то заявка не будет исполнена повторно, а в качестве ответа будет возвращена копия ответа на первый запрос с таким значением идентификатора (required)
        :param str trade_server_code: Код торгового сервера (required)
        :param int order_id: Идентификатор заявки (required)
        :return: OrdersActionsStopProfitLoss
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2clientordersactionstake_profitorder_id_with_http_info(body, x_alor_reqid, trade_server_code, order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v2clientordersactionstake_profitorder_id_with_http_info(body, x_alor_reqid, trade_server_code, order_id, **kwargs)  # noqa: E501
            return data

    def v2clientordersactionstake_profitorder_id_with_http_info(self, body, x_alor_reqid, trade_server_code, order_id, **kwargs):  # noqa: E501
        """Изменение стоп-заявки  # noqa: E501

        Изменение стоп-заявки с указанным номером  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2clientordersactionstake_profitorder_id_with_http_info(body, x_alor_reqid, trade_server_code, order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BodyrequestOrdersActionsStop body: Тело заявки (required)
        :param str x_alor_reqid: Требуется уникальная случайная строка в качестве идентификатора запроса. Если уже приходил запрос с таким идентификатором, то заявка не будет исполнена повторно, а в качестве ответа будет возвращена копия ответа на первый запрос с таким значением идентификатора (required)
        :param str trade_server_code: Код торгового сервера (required)
        :param int order_id: Идентификатор заявки (required)
        :return: OrdersActionsStopProfitLoss
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_alor_reqid', 'trade_server_code', 'order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2clientordersactionstake_profitorder_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `v2clientordersactionstake_profitorder_id`")  # noqa: E501
        # verify the required parameter 'x_alor_reqid' is set
        if ('x_alor_reqid' not in params or
                params['x_alor_reqid'] is None):
            raise ValueError("Missing the required parameter `x_alor_reqid` when calling `v2clientordersactionstake_profitorder_id`")  # noqa: E501
        # verify the required parameter 'trade_server_code' is set
        if ('trade_server_code' not in params or
                params['trade_server_code'] is None):
            raise ValueError("Missing the required parameter `trade_server_code` when calling `v2clientordersactionstake_profitorder_id`")  # noqa: E501
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `v2clientordersactionstake_profitorder_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'trade_server_code' in params:
            path_params['tradeServerCode'] = params['trade_server_code']  # noqa: E501
        if 'order_id' in params:
            path_params['orderId'] = params['order_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_alor_reqid' in params:
            header_params['X-ALOR-REQID'] = params['x_alor_reqid']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'string'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/warptrans/{tradeServerCode}/v2/client/orders/actions/takeProfit/{orderId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrdersActionsStopProfitLoss',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
